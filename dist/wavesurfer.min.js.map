{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/util/ajax.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/extend.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/peakcache.js","webpack://WaveSurfer/./src/mediaelement-webaudio.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Observer","_disabledEventEmissions","handlers","event","fn","push","callback","un","e","length","splice","handler","on","args","apply","setTimeout","eventNames","includes","_isDisabledEventEmission","forEach","prefix","undefined","Math","random","toString","substring","el","styles","keys","prop","style","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","WebAudio","params","audioContext","offlineAudioContext","stateBehaviors","init","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","fireEvent","ac","supportsWebAudio","getAudioContext","lastPlay","currentTime","scheduledPause","states","buffer","filters","gainNode","mergedPeaks","offlineAc","peaks","playbackRate","analyser","scriptNode","source","splitPeaks","state","explicitDuration","destroyed","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","filter","disconnect","connect","setFilters","disconnectFilters","reduce","prev","curr","audioScriptProcessor","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","deviceId","audio","Audio","setSinkId","Promise","reject","Error","autoplay","dest","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","arraybuffer","errback","getOfflineAudioContext","decodeAudioData","data","channels","numberOfChannels","first","last","splitChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","start","end","min","max","j","disconnectSource","closeAudioContext","close","isPaused","unAll","destroyWebAudio","createSource","createBufferSource","noteGrainOn","stop","noteOff","resume","adjustedTime","seekTo","resumeAudioContext","play","util","MediaElement","media","paused","volume","mediaType","toLowerCase","elementPosition","isMuted","onPlayEnd","mediaListeners","createTimer","error","canplay","ended","seeked","volumechange","muted","id","removeEventListener","addEventListener","onAudioProcess","frame","url","container","preload","document","createElement","controls","mediaControls","src","width","crossOrigin","prevMedia","querySelector","removeChild","appendChild","_load","elt","HTMLMediaElement","load","_setupMediaListeners","setVolume","Infinity","seekable","clearPlayEnd","promise","setPlayEnd","_onPlayEnd","removeMediaElementOnDestroy","parentNode","WaveSurfer","defaultParams","autoCenter","autoCenterRate","autoCenterImmediately","backend","backgroundColor","barHeight","barRadius","barGap","barMinHeight","cursorColor","cursorWidth","dragSelection","drawingContextAttributes","desynchronized","fillParent","forceDecode","height","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","minPxPerSec","normalize","partialRender","pixelRatio","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","progressColor","reflection","renderer","MultiCanvas","responsive","rtl","scrollParent","skipLength","splitChannelsOptions","overlay","channelColors","filterChannels","waveColor","xhr","backends","MediaElementWebAudio","assign","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","drawer","peakCache","Drawer","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","wrapper","clientWidth","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","instance","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroy","drawBuffer","progress","newVolume","getVolume","PeakCache","seconds","position","skip","offset","seekAndCenter","recenter","isFinite","oldScrollParent","rate","getPlaybackRate","setMute","mute","color","background","updateCursor","setHeight","channelIndices","nominalWidth","round","parentWidth","getWidth","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","decodeArrayBuffer","loadDecodedBuffer","blob","reader","FileReader","onProgress","loadArrayBuffer","target","result","readAsArrayBuffer","empty","preloadIgnoreReasons","indexOf","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","action","once","getArrayBuffer","setPeaks","urlOrElt","loadElt","err","options","responseType","request","fetchFile","percentComplete","lengthComputable","loaded","total","accuracy","noWindow","arr","map","val","resolve","json","JSON","stringify","open","encodeURIComponent","format","quality","type","getImage","controller","abort","cancelAjax","clearTmpEvents","setWidth","destroyAllPlugins","VERSION","__VERSION__","XMLHttpRequest","fired100","method","requestHeaders","header","setRequestHeader","withCredentials","status","response","send","values","largest","smallest","Number","sources","func","wait","immediate","timeout","context","timestamp","later","Date","now","debounced","arguments","callNow","clear","clearTimeout","flush","preventClickHandler","stopPropagation","body","fetchHeaders","Headers","fetchRequest","Request","AbortController","append","fetchOptions","headers","credentials","cache","redirect","referrer","signal","fetch","then","progressAvailable","documentMode","test","navigator","userAgent","contentLength","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","text","catch","_reader","getReader","parseInt","read","done","byteLength","enqueue","maxCanvasElementWidth","hasProgressCanvas","halfPixel","canvases","progressWave","EntryClass","CanvasEntry","canvasContextAttributes","overlap","ceil","createWrapper","createElements","zIndex","left","top","bottom","overflow","display","boxSizing","borderRightStyle","pointerEvents","addCanvas","borderRightWidth","borderRightColor","totalWidth","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","clearWave","makeInset","leftOffset","initWave","initProgress","lastEntry","wave","parentElement","pop","elementWidth","channelIndex","prepareDraw","absmax","hasMinVals","offsetY","halfH","peakIndexScale","bar","barWidth","step","scale","halfHmod","peak","floor","h","abs","fillRect","reflectedPeaks","len","drawLine","setFillStyles","drawLines","x","y","radius","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","drawIndex","Array","filteredChannels","hideChannel","channelPeaks","some","all","images","rightInset","actualWidth","lastPos","userSelect","webkitUserSelect","overflowX","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","right","scrollLeft","scrollWidth","scrollbarHeight","offsetHeight","clientHeight","clientY","handleEvent","drawBars","drawWave","percent","recenterOnPosition","half","maxScroll","updateSize","minPxDelta","pos","newPos","updateProgress","waveCtx","progressCtx","constructor","getContext","offsetLeft","elementSize","clearRect","canvas","fillStyle","fillRectToContext","ctx","drawRoundedRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","drawLineToContext","canvasStart","canvasEnd","halfOffset","absmaxHalf","toBlob","toDataURL","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","sourceMediaElement","createMediaElementSource","mediaElement"],"mappings":";;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,aAAc,GAAIH,GACC,iBAAZC,QACdA,QAAoB,WAAID,IAExBD,EAAiB,WAAIC,IARvB,CASGK,MAAM,WACT,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,qkCClFrD,cACA,UACA,UACA,WACA,UACA,WACA,UACA,UACA,WACA,WACA,WACA,W,8TCDqBC,E,WAIjB,c,4FAAc,SAMVpC,KAAKqC,wBAA0B,GAC/BrC,KAAKsC,SAAW,K,kDASjBC,EAAOC,GAAI,WACLxC,KAAKsC,WACNtC,KAAKsC,SAAW,IAGpB,IAAIA,EAAWtC,KAAKsC,SAASC,GAO7B,OANKD,IACDA,EAAWtC,KAAKsC,SAASC,GAAS,IAEtCD,EAASG,KAAKD,GAGP,CACH7B,KAAM4B,EACNG,SAAUF,EACVG,GAAI,SAACC,EAAGJ,GAAJ,OAAW,EAAKG,GAAGC,EAAGJ,O,yBAW/BD,EAAOC,GACN,GAAKxC,KAAKsC,SAAV,CAIA,IACIlC,EADEkC,EAAWtC,KAAKsC,SAASC,GAE/B,GAAID,EACA,GAAIE,EACA,IAAKpC,EAAIkC,EAASO,OAAS,EAAGzC,GAAK,EAAGA,IAC9BkC,EAASlC,IAAMoC,GACfF,EAASQ,OAAO1C,EAAG,QAI3BkC,EAASO,OAAS,K,8BAS1B7C,KAAKsC,SAAW,O,2BAWfC,EAAOQ,GAAS,WASjB,OAAO/C,KAAKgD,GAAGT,GARJ,SAALC,IAAkB,2BAATS,EAAS,yBAATA,EAAS,gBAEpBF,EAAQG,MAAM,EAAMD,GAEpBE,YAAW,WACP,EAAKR,GAAGJ,EAAOC,KAChB,Q,gDAeeY,GACtBpD,KAAKqC,wBAA0Be,I,+CAQVb,GACrB,OAAOvC,KAAKqC,yBAA2BrC,KAAKqC,wBAAwBgB,SAASd,K,gCASvEA,GAAgB,2BAANU,EAAM,iCAANA,EAAM,kBACtB,GAAKjD,KAAKsC,WAAYtC,KAAKsD,yBAAyBf,GAApD,CAIA,IAAMD,EAAWtC,KAAKsC,SAASC,GAC/BD,GACIA,EAASiB,SAAQ,SAAAf,GACbA,EAAE,WAAF,EAAMS,Y,yJCjIP,SAAeO,QACXC,IAAXD,IACAA,EAAS,eAEb,OACIA,EACAE,KAAKC,SACAC,SAAS,IACTC,UAAU,I,6GCXR,SAAeC,EAAIC,GAM9B,OALAjD,OAAOkD,KAAKD,GAAQR,SAAQ,SAAAU,GACpBH,EAAGI,MAAMD,KAAUF,EAAOE,KAC1BH,EAAGI,MAAMD,GAAQF,EAAOE,OAGzBH,G,2HCNPK,OAAOC,uBACPD,OAAOE,6BACPF,OAAOG,0BACPH,OAAOI,wBACPJ,OAAOK,yBACN,SAAC9B,EAAU+B,GAAX,OAAuBtB,WAAWT,EAAU,IAAO,MACtDd,KAAKuC,Q,gICdP,M,maAAA,O,m+CAGA,IASqBO,E,gQAyFjB,WAAYC,GAAQ,iB,4FAAA,UAChB,gBAtFJC,aAAe,KAqFK,EAnFpBC,oBAAsB,KAmFF,EAjFpBC,gBAiFoB,OAlGR,UAkBG,CACPC,KADO,WAEH/E,KAAKgF,qBAETC,kBAJO,WAKH,IAAMC,EAAWlF,KAAKmF,cACtB,OAAOnF,KAAKoF,iBAAmBF,GAAY,GAE/CE,eARO,WASH,OAAOpF,KAAKqF,cAAgBrF,KAAKsF,mBAuEzB,IAjGT,SA6BG,CACNP,KADM,WAEF/E,KAAKuF,wBAETN,kBAJM,WAKF,IAAMC,EAAWlF,KAAKmF,cACtB,OAAOnF,KAAKoF,iBAAmBF,GAAY,GAE/CE,eARM,WASF,OAAOpF,KAAKqF,iBA2DJ,IAhGP,WAwCG,CACRN,KADQ,WAEJ/E,KAAKuF,uBACLvF,KAAKwF,UAAU,WAEnBP,kBALQ,WAMJ,OAAO,GAEXG,eARQ,WASJ,OAAOpF,KAAKmF,iBA+CJ,GAGhB,EAAKR,OAASA,EAEd,EAAKc,GACDd,EAAOC,eACN,EAAKc,mBAAqB,EAAKC,kBAAoB,IAExD,EAAKC,SAAW,EAAKH,GAAGI,YAExB,EAAKR,cAAgB,EAErB,EAAKS,eAAiB,KAEtB,EAAKC,QAAL,OAjHQ,UAkHOjF,OAAOY,OAAO,EAAKoD,eAAL,UAD7B,IAhHO,SAkHOhE,OAAOY,OAAO,EAAKoD,eAAL,SAF5B,IA/GS,WAkHOhE,OAAOY,OAAO,EAAKoD,eAAL,WAH9B,GAMA,EAAKkB,OAAS,KAEd,EAAKC,QAAU,GAEf,EAAKC,SAAW,KAEhB,EAAKC,YAAc,KAEnB,EAAKC,UAAY,KAEjB,EAAKC,MAAQ,KAEb,EAAKC,aAAe,EAEpB,EAAKC,SAAW,KAEhB,EAAKC,WAAa,KAElB,EAAKC,OAAS,KAEd,EAAKC,WAAa,GAElB,EAAKC,MAAQ,KAEb,EAAKC,iBAAmBjC,EAAOO,SAI/B,EAAK2B,WAAY,EAjDD,E,qDApChB,SAAU1C,OAAO2C,eAAgB3C,OAAO4C,sB,wCAaxC,OAJK5C,OAAO6C,yBACR7C,OAAO6C,uBAAyB,IAAK7C,OAAO2C,cACxC3C,OAAO4C,qBAER5C,OAAO6C,yB,6CAUKC,GAKnB,OAJK9C,OAAO+C,gCACR/C,OAAO+C,8BAAgC,IAAK/C,OAAOgD,qBAC/ChD,OAAOiD,2BAA2B,EAAG,EAAGH,IAEzC9C,OAAO+C,kC,kCAgEdlH,KAAKqH,mBACLrH,KAAKsH,mBACLtH,KAAKuH,qBAELvH,KAAKwH,SA7JE,UA8JPxH,KAAKyH,gBAAgBzH,KAAK2E,OAAO+C,WACjC1H,KAAK2H,UAAU,K,0CAKX3H,KAAKiG,UACLjG,KAAKiG,QAAQ1C,SAAQ,SAAAqE,GACjBA,GAAUA,EAAOC,gBAErB7H,KAAKiG,QAAU,KAEfjG,KAAKuG,SAASuB,QAAQ9H,KAAKkG,a,+BAS1BS,GACD3G,KAAK2G,QAAU3G,KAAK+F,OAAOY,KAC3B3G,KAAK2G,MAAQ3G,KAAK+F,OAAOY,GACzB3G,KAAK2G,MAAM5B,KAAKxE,KAAKP,S,kCASP,2BAATiG,EAAS,yBAATA,EAAS,gBAClBjG,KAAK+H,WAAW9B,K,iCAWTA,GAEPjG,KAAKgI,oBAGD/B,GAAWA,EAAQpD,SACnB7C,KAAKiG,QAAUA,EAGfjG,KAAKuG,SAASsB,aAGd5B,EACKgC,QAAO,SAACC,EAAMC,GAEX,OADAD,EAAKJ,QAAQK,GACNA,IACRnI,KAAKuG,UACPuB,QAAQ9H,KAAKkG,a,yCAKlBlG,KAAK2E,OAAOyD,qBACZpI,KAAKwG,WAAaxG,KAAK2E,OAAOyD,qBAE1BpI,KAAKyF,GAAG4C,sBACRrI,KAAKwG,WAAaxG,KAAKyF,GAAG4C,sBACtB3D,EAAS4D,kBAGbtI,KAAKwG,WAAaxG,KAAKyF,GAAG8C,qBACtB7D,EAAS4D,kBAIrBtI,KAAKwG,WAAWsB,QAAQ9H,KAAKyF,GAAG+C,e,0CAIhB,WAChBxI,KAAKwG,WAAWiC,eAAiB,WAC7B,IAAMC,EAAO,EAAKtD,iBAEdsD,GAAQ,EAAKvD,eACb,EAAKqC,SAtPJ,YAuPD,EAAKhC,UAAU,UACRkD,GAAQ,EAAK5C,eACpB,EAAK6C,QACE,EAAKhC,QAAU,EAAKZ,OAAL,SACtB,EAAKP,UAAU,eAAgBkD,M,6CAOvC1I,KAAKwG,WAAWiC,eAAiB,e,2CAIjCzI,KAAKuG,SAAWvG,KAAKyF,GAAGmD,iBACxB5I,KAAKuG,SAASuB,QAAQ9H,KAAKkG,Y,yCASvBlG,KAAKyF,GAAGoD,WACR7I,KAAKkG,SAAWlG,KAAKyF,GAAGoD,aAExB7I,KAAKkG,SAAWlG,KAAKyF,GAAGqD,iBAG5B9I,KAAKkG,SAAS4B,QAAQ9H,KAAKyF,GAAG+C,e,gCAUxBO,GACN,GAAIA,EAAU,CAMV,IAAIC,EAAQ,IAAI7E,OAAO8E,MACvB,IAAKD,EAAME,UACP,OAAOC,QAAQC,OACX,IAAIC,MAAM,+CAGlBL,EAAMM,UAAW,EACjB,IAAIC,EAAOvJ,KAAKyF,GAAG+D,+BAKnB,OAJAxJ,KAAKkG,SAAS2B,aACd7H,KAAKkG,SAAS4B,QAAQyB,GACtBP,EAAMS,UAAYF,EAAKG,OAEhBV,EAAME,UAAUH,GAEvB,OAAOI,QAAQC,OAAO,IAAIC,MAAM,qBAAuBN,M,gCASrD1H,GACNrB,KAAKkG,SAASyD,KAAKC,eAAevI,EAAOrB,KAAKyF,GAAGI,e,kCASjD,OAAO7F,KAAKkG,SAASyD,KAAKtI,Q,wCAWZwI,EAAanH,EAAUoH,GAChC9J,KAAKoG,YACNpG,KAAKoG,UAAYpG,KAAK+J,uBAClB/J,KAAKyF,IAAMzF,KAAKyF,GAAGwB,WAAajH,KAAKyF,GAAGwB,WAAa,QAG7DjH,KAAKoG,UAAU4D,gBACXH,GACA,SAAAI,GAAI,OAAIvH,EAASuH,KACjBH,K,+BAUCzD,EAAOnB,GACI,MAAZA,IACAlF,KAAK4G,iBAAmB1B,GAE5BlF,KAAKqG,MAAQA,I,gCAQPxD,GAEN,IAAI7C,KAAKmG,aAAetD,GAAU,EAAI7C,KAAKmG,YAAYtD,OAAS,EAAI,EAApE,CAIA7C,KAAK0G,WAAa,GAClB1G,KAAKmG,YAAc,GAGnB,IACI1F,EADEyJ,EAAWlK,KAAKgG,OAAShG,KAAKgG,OAAOmE,iBAAmB,EAE9D,IAAK1J,EAAI,EAAGA,EAAIyJ,EAAUzJ,IACtBT,KAAK0G,WAAWjG,GAAK,GACrBT,KAAK0G,WAAWjG,GAAG,GAAKoC,EAAS,IAAM,EACvC7C,KAAK0G,WAAWjG,GAAG,GAAKoC,EAAS,GAAK,GAAK,EAE/C7C,KAAKmG,YAAY,GAAKtD,EAAS,IAAM,EACrC7C,KAAKmG,YAAY,GAAKtD,EAAS,GAAK,GAAK,K,+BAYpCA,EAAQuH,EAAOC,GACpB,GAAIrK,KAAKqG,MACL,OAAOrG,KAAKqG,MAEhB,IAAKrG,KAAKgG,OACN,MAAO,GAQX,GALAoE,EAAQA,GAAS,EACjBC,EAAOA,GAAQxH,EAAS,EAExB7C,KAAK2H,UAAU9E,IAEV7C,KAAKgG,OACN,OAAOhG,KAAK2E,OAAO2F,cACbtK,KAAK0G,WACL1G,KAAKmG,YAUf,IAAKnG,KAAKgG,OAAOnD,OAAQ,CACrB,IAAM0H,EAAYvK,KAAKwK,aAAa,EAAG,KAAMxK,KAAKiH,YAClDjH,KAAKgG,OAASuE,EAAUvE,OAG5B,IAGIvF,EAHEgK,EAAazK,KAAKgG,OAAOnD,OAASA,EAClC6H,KAAgBD,EAAa,KAAO,EACpCP,EAAWlK,KAAKgG,OAAOmE,iBAG7B,IAAK1J,EAAI,EAAGA,EAAIyJ,EAAUzJ,IAAK,CAC3B,IAAM4F,EAAQrG,KAAK0G,WAAWjG,GACxBkK,EAAO3K,KAAKgG,OAAO4E,eAAenK,GACpCL,OAAC,EAEL,IAAKA,EAAIgK,EAAOhK,GAAKiK,EAAMjK,IAAK,CAC5B,IAAMyK,KAAWzK,EAAIqK,GACfK,KAASD,EAAQJ,GAOnBM,EAAMJ,EAAKE,GACXG,EAAMD,EACNE,OAAC,EAEL,IAAKA,EAAIJ,EAAOI,EAAIH,EAAKG,GAAKP,EAAY,CACtC,IAAMrJ,EAAQsJ,EAAKM,GAEf5J,EAAQ2J,IACRA,EAAM3J,GAGNA,EAAQ0J,IACRA,EAAM1J,GAIdgF,EAAM,EAAIjG,GAAK4K,EACf3E,EAAM,EAAIjG,EAAI,GAAK2K,GAEV,GAALtK,GAAUuK,EAAMhL,KAAKmG,YAAY,EAAI/F,MACrCJ,KAAKmG,YAAY,EAAI/F,GAAK4K,IAGrB,GAALvK,GAAUsK,EAAM/K,KAAKmG,YAAY,EAAI/F,EAAI,MACzCJ,KAAKmG,YAAY,EAAI/F,EAAI,GAAK2K,IAK1C,OAAO/K,KAAK2E,OAAO2F,cAAgBtK,KAAK0G,WAAa1G,KAAKmG,c,0CAS1D,OAAOnG,KAAK2G,MAAM1B,kBAAkB1E,KAAKP,Q,yCAKrCA,KAAKyG,QACLzG,KAAKyG,OAAOoB,e,wCAOhB7H,KAAKgI,oBACLhI,KAAKkL,mBACLlL,KAAKkG,SAAS2B,aACd7H,KAAKwG,WAAWqB,aAChB7H,KAAKuG,SAASsB,aAGV7H,KAAK2E,OAAOwG,oBAGiB,mBAAlBnL,KAAKyF,GAAG2F,OACE,UAAjBpL,KAAKyF,GAAGkB,OAER3G,KAAKyF,GAAG2F,QAGZpL,KAAKyF,GAAK,KAGLzF,KAAK2E,OAAOC,aAGb5E,KAAK2E,OAAOC,aAAe,KAF3BT,OAAO6C,uBAAyB,KAKpC7C,OAAO+C,8BAAgC,Q,gCAOtClH,KAAKqL,YACNrL,KAAK2I,QAET3I,KAAKsL,QACLtL,KAAKgG,OAAS,KACdhG,KAAK6G,WAAY,EAEjB7G,KAAKuL,oB,2BAQJvF,GACDhG,KAAKqF,cAAgB,EACrBrF,KAAK4F,SAAW5F,KAAKyF,GAAGI,YACxB7F,KAAKgG,OAASA,EACdhG,KAAKwL,iB,qCAKLxL,KAAKkL,mBACLlL,KAAKyG,OAASzG,KAAKyF,GAAGgG,qBAGtBzL,KAAKyG,OAAOoE,MAAQ7K,KAAKyG,OAAOoE,OAAS7K,KAAKyG,OAAOiF,YACrD1L,KAAKyG,OAAOkF,KAAO3L,KAAKyG,OAAOkF,MAAQ3L,KAAKyG,OAAOmF,QAEnD5L,KAAKyG,OAAOH,aAAasD,eACrB5J,KAAKsG,aACLtG,KAAKyF,GAAGI,aAEZ7F,KAAKyG,OAAOT,OAAShG,KAAKgG,OAC1BhG,KAAKyG,OAAOqB,QAAQ9H,KAAKuG,Y,2CASJ,aAAjBvG,KAAKyF,GAAGkB,OACR3G,KAAKyF,GAAGoG,QAAU7L,KAAKyF,GAAGoG,W,iCAU9B,OAAO7L,KAAK2G,QAAU3G,KAAK+F,OAAL,U,oCAStB,OAAI/F,KAAK4G,iBACE5G,KAAK4G,iBAEX5G,KAAKgG,OAGHhG,KAAKgG,OAAOd,SAFR,I,6BAaR2F,EAAOC,GACV,GAAK9K,KAAKgG,OAuBV,OAnBAhG,KAAK8F,eAAiB,KAET,MAAT+E,IACAA,EAAQ7K,KAAKoF,mBACApF,KAAKmF,gBACd0F,EAAQ,GAGL,MAAPC,IACAA,EAAM9K,KAAKmF,eAGfnF,KAAKqF,cAAgBwF,EACrB7K,KAAK4F,SAAW5F,KAAKyF,GAAGI,YAEpB7F,KAAK2G,QAAU3G,KAAK+F,OAAL,UACf/F,KAAKwH,SA7nBF,UAgoBA,CACHqD,MAAOA,EACPC,IAAKA,K,sCAUT,OAAQ9K,KAAKyF,GAAGI,YAAc7F,KAAK4F,UAAY5F,KAAKsG,e,2BAUnDuE,EAAOC,GACR,GAAK9K,KAAKgG,OAAV,CAKAhG,KAAKwL,eAEL,IAAMM,EAAe9L,KAAK+L,OAAOlB,EAAOC,GAExCD,EAAQiB,EAAajB,MACrBC,EAAMgB,EAAahB,IAEnB9K,KAAK8F,eAAiBgF,EAEtB9K,KAAKyG,OAAOoE,MAAM,EAAGA,GAErB7K,KAAKgM,qBAELhM,KAAKwH,SA1qBG,WA4qBRxH,KAAKwF,UAAU,W,8BAOfxF,KAAK8F,eAAiB,KAEtB9F,KAAKqF,eAAiBrF,KAAKsF,gBAC3BtF,KAAKyG,QAAUzG,KAAKyG,OAAOkF,KAAK,GAEhC3L,KAAKwH,SAvrBE,UAyrBPxH,KAAKwF,UAAU,W,uCAUf,OAAOxF,KAAK2G,MAAMvB,eAAe7E,KAAKP,Q,wCAStC,OAAOA,KAAKsG,e,sCAQAjF,GACZA,EAAQA,GAAS,EACbrB,KAAKqL,WACLrL,KAAKsG,aAAejF,GAEpBrB,KAAK2I,QACL3I,KAAKsG,aAAejF,EACpBrB,KAAKiM,U,iCAUFnB,GACP9K,KAAK8F,eAAiBgF,M,GA9tBQoB,EAAK9J,U,YAAtBsC,EAEV4D,iBAAmB,I,oHCd9B,I,EAAA,G,EAAA,O,2BACA,E,maAAA,O,6lDAKqB6D,E,sQAMjB,WAAYxH,GAAQ,a,4FAAA,UAChB,cAAMA,IAEDA,OAASA,EAOd,EAAKyH,MAAQ,CACTvG,YAAa,EACbX,SAAU,EACVmH,QAAQ,EACR/F,aAAc,EACd2F,KALS,aAMTtD,MANS,aAOT2D,OAAQ,GAIZ,EAAKC,UAAY5H,EAAO4H,UAAUC,cAElC,EAAKC,gBAAkB9H,EAAO8H,gBAE9B,EAAKpG,MAAQ,KAEb,EAAKC,aAAe,EAEpB,EAAKgG,OAAS,EAEd,EAAKI,SAAU,EAEf,EAAK1G,OAAS,KAEd,EAAK2G,UAAY,KAEjB,EAAKC,eAAiB,GArCN,E,4CA4ChB5M,KAAKyH,gBAAgBzH,KAAK2E,OAAO+C,WACjC1H,KAAK6M,gB,6CAMc,WACnB7M,KAAK4M,eAAeE,MAAQ,WACxB,EAAKtH,UAAU,QAAS,gCAE5BxF,KAAK4M,eAAeG,QAAU,WAC1B,EAAKvH,UAAU,YAEnBxF,KAAK4M,eAAeI,MAAQ,WACxB,EAAKxH,UAAU,WAInBxF,KAAK4M,eAAeX,KAAO,WACvB,EAAKzG,UAAU,SAEnBxF,KAAK4M,eAAejE,MAAQ,WACxB,EAAKnD,UAAU,UAEnBxF,KAAK4M,eAAeK,OAAS,SAAA1K,GACzB,EAAKiD,UAAU,SAEnBxF,KAAK4M,eAAeM,aAAe,SAAA3K,GAC/B,EAAKmK,QAAU,EAAKN,MAAMe,MACtB,EAAKT,QACL,EAAKJ,OAAS,EAEd,EAAKA,OAAS,EAAKF,MAAME,OAE7B,EAAK9G,UAAU,WAInB1E,OAAOkD,KAAKhE,KAAK4M,gBAAgBrJ,SAAQ,SAAA6J,GACrC,EAAKhB,MAAMiB,oBAAoBD,EAAI,EAAKR,eAAeQ,IACvD,EAAKhB,MAAMkB,iBAAiBF,EAAI,EAAKR,eAAeQ,S,oCAO9C,WAWVpN,KAAKgD,GAAG,QAVe,SAAjBuK,IACE,EAAKlC,aAGT,EAAK7F,UAAU,eAAgB,EAAKJ,kBAGpC8G,EAAKsB,MAAMD,EAAXrB,OAOJlM,KAAKgD,GAAG,SAAS,WACb,EAAKwC,UAAU,eAAgB,EAAKJ,uB,2BAevCqI,EAAKC,EAAWrH,EAAOsH,GACxB,IAAMvB,EAAQwB,SAASC,cAAc7N,KAAKuM,WAC1CH,EAAM0B,SAAW9N,KAAK2E,OAAOoJ,cAC7B3B,EAAM9C,SAAWtJ,KAAK2E,OAAO2E,WAAY,EACzC8C,EAAMuB,QAAqB,MAAXA,EAAkB,OAASA,EAC3CvB,EAAM4B,IAAMP,EACZrB,EAAMlI,MAAM+J,MAAQ,OACpB7B,EAAM8B,YAAc,YAEpB,IAAMC,EAAYT,EAAUU,cAAcpO,KAAKuM,WAC3C4B,GACAT,EAAUW,YAAYF,GAE1BT,EAAUY,YAAYlC,GAEtBpM,KAAKuO,MAAMnC,EAAO/F,EAAOsH,K,8BASrBa,EAAKnI,GACTmI,EAAIV,SAAW9N,KAAK2E,OAAOoJ,cAC3BS,EAAIlF,SAAWtJ,KAAK2E,OAAO2E,WAAY,EAEvCtJ,KAAKuO,MAAMC,EAAKnI,EAAOmI,EAAIb,W,4BAczBvB,EAAO/F,EAAOsH,GAEhB,KACMvB,aAAiBqC,wBACe,IAA3BrC,EAAMkB,iBAEb,MAAM,IAAIjE,MAAM,gDAQK,mBAAd+C,EAAMsC,MAAwBrI,GAAoB,QAAXsH,GAK9CvB,EAAMsC,OAGV1O,KAAKoM,MAAQA,EACbpM,KAAK2O,uBACL3O,KAAKqG,MAAQA,EACbrG,KAAK2M,UAAY,KACjB3M,KAAKgG,OAAS,KACdhG,KAAK0M,QAAUN,EAAMe,MACrBnN,KAAKyH,gBAAgBzH,KAAKsG,cAC1BtG,KAAK4O,UAAU5O,KAAKsM,U,iCASpB,OAAQtM,KAAKoM,OAASpM,KAAKoM,MAAMC,S,oCASjC,GAAIrM,KAAK4G,iBACL,OAAO5G,KAAK4G,iBAEhB,IAAI1B,GAAYlF,KAAKgG,QAAUhG,KAAKoM,OAAOlH,SAK3C,OAJIA,GAAY2J,MAEZ3J,EAAWlF,KAAKoM,MAAM0C,SAAShE,IAAI,IAEhC5F,I,uCAUP,OAAOlF,KAAKoM,OAASpM,KAAKoM,MAAMvG,c,0CAShC,OAAO7F,KAAKoF,iBAAmBpF,KAAKmF,eAAiB,I,wCASrD,OAAOnF,KAAKsG,cAAgBtG,KAAKoM,MAAM9F,e,sCAQ3BjF,GACZrB,KAAKsG,aAAejF,GAAS,EAC7BrB,KAAKoM,MAAM9F,aAAetG,KAAKsG,e,6BAQ5BuE,GACU,MAATA,IACA7K,KAAKoM,MAAMvG,YAAcgF,GAE7B7K,KAAK+O,iB,2BAYJlE,EAAOC,GACR9K,KAAK+L,OAAOlB,GACZ,IAAMmE,EAAUhP,KAAKoM,MAAMH,OAG3B,OAFAnB,GAAO9K,KAAKiP,WAAWnE,GAEhBkE,I,8BAUP,IAAIA,EAOJ,OALIhP,KAAKoM,QACL4C,EAAUhP,KAAKoM,MAAMzD,SAEzB3I,KAAK+O,eAEEC,I,iCAQAlE,GAAK,WACZ9K,KAAK+O,eAEL/O,KAAKkP,WAAa,SAAAxG,GACVA,GAAQoC,IACR,EAAKnC,QACL,EAAKoD,OAAOjB,KAGpB9K,KAAKgD,GAAG,eAAgBhD,KAAKkP,c,qCAKzBlP,KAAKkP,aACLlP,KAAK2C,GAAG,eAAgB3C,KAAKkP,YAC7BlP,KAAKkP,WAAa,Q,+BAcjBrM,EAAQuH,EAAOC,GACpB,OAAIrK,KAAKgG,OACL,4CAAsBnD,EAAQuH,EAAOC,GAElCrK,KAAKqG,OAAS,K,gCAUf0C,GACN,OAAIA,EACK/I,KAAKoM,MAAMlD,UAKTlJ,KAAKoM,MAAMlD,UAAUH,GAJjBI,QAAQC,OACX,IAAIC,MAAM,+CAMfF,QAAQC,OAAO,IAAIC,MAAM,qBAAuBN,M,kCASvD,OAAO/I,KAAKsM,S,gCAQNjL,GACNrB,KAAKsM,OAASjL,EAEVrB,KAAKoM,MAAME,SAAWtM,KAAKsM,SAC3BtM,KAAKoM,MAAME,OAAStM,KAAKsM,U,8BAUzBa,GAGJnN,KAAK0M,QAAU1M,KAAKoM,MAAMe,MAAQA,I,gCAO5B,WACNnN,KAAK2I,QACL3I,KAAKsL,QACLtL,KAAK6G,WAAY,EAGjB/F,OAAOkD,KAAKhE,KAAK4M,gBAAgBrJ,SAAQ,SAAA6J,GACjC,EAAKhB,OACL,EAAKA,MAAMiB,oBAAoBD,EAAI,EAAKR,eAAeQ,OAK3DpN,KAAK2E,OAAOwK,6BACZnP,KAAKoM,OACLpM,KAAKoM,MAAMgD,YAEXpP,KAAKoM,MAAMgD,WAAWf,YAAYrO,KAAKoM,OAG3CpM,KAAKoM,MAAQ,U,8BAjbqB1H,W,gICN1C,M,maAAA,OACA,WACA,UACA,UACA,WACA,W,mgDAoNqB2K,E,gQAsHjB,WAAY1K,GAAQ,MAchB,GAdgB,WAChB,gBArHJ2K,cAAgB,CACZ1K,aAAc,KACdwD,qBAAsB,KACtBV,UAAW,EACX6H,YAAY,EACZC,eAAgB,EAChBC,uBAAuB,EACvBC,QAAS,WACTC,gBAAiB,KACjBC,UAAW,EACXC,UAAW,EACXC,OAAQ,KACRC,aAAc,KACdrC,UAAW,KACXsC,YAAa,OACbC,YAAa,EACbC,eAAe,EACfC,yBAA0B,CAItBC,gBAAgB,GAEpBlL,SAAU,KACVmL,YAAY,EACZC,aAAa,EACbC,OAAQ,IACRC,eAAe,EACfC,UAAU,EACVC,eAAe,EACfC,eAAgB,IAChBC,eAAgB,KAChB7C,eAAe,EACfxB,UAAW,QACXsE,YAAa,GACbC,WAAW,EACXC,eAAe,EACfC,WACI7M,OAAO8M,kBAAoBC,OAAOC,WAAaD,OAAOE,YAC1DC,QAAS,GACTC,cAAe,OACfC,YAAY,EACZpC,6BAA6B,EAC7BqC,SAAUC,UACVC,YAAY,EACZC,KAAK,EACLC,cAAc,EACdC,WAAY,EACZvH,eAAe,EACfwH,qBAAsB,CAClBC,SAAS,EACTC,cAAe,GACfC,eAAgB,IAEpBC,UAAW,OACXC,IAAK,IA6DW,EAzDpBC,SAAW,CACPjG,uBACAzH,mBACA2N,gCAsDgB,EApBpBnG,KAAOA,EA0BH,EAAKvH,OAAS7D,OAAOwR,OAAO,GAAI,EAAKhD,cAAe3K,GAGpD,EAAK+I,UACD,iBAAmB/I,EAAO+I,UACpBE,SAASQ,cAAc,EAAKzJ,OAAO+I,WACnC,EAAK/I,OAAO+I,WAEjB,EAAKA,UACN,MAAM,IAAIrE,MAAM,+BAgBpB,GAbkC,MAA9B,EAAK1E,OAAOiM,eAEZ,EAAKA,eAAiB,EAAKlD,UACiB,iBAA9B,EAAK/I,OAAOiM,eAE1B,EAAKA,eAAiBhD,SAASQ,cAC3B,EAAKzJ,OAAOiM,gBAIhB,EAAKA,eAAiB,EAAKjM,OAAOiM,gBAGjC,EAAKA,eACN,MAAM,IAAIvH,MAAM,qCAGpB,GAAI,EAAK1E,OAAOgM,gBAAkB,EAC9B,MAAM,IAAItH,MAAM,yCACb,GAAI,EAAK1E,OAAOgM,eAAiB,GAAK,EACzC,MAAM,IAAItH,MAAM,yCA8CpB,IA3CwB,IAApB,EAAK1E,OAAOgN,KACZzF,EAAKhI,MAAM,EAAKwJ,UAAW,CAAE6E,UAAW,oBAGxC,EAAK5N,OAAOgL,iBACZ,EAAK6C,mBAAmB,EAAK7N,OAAOgL,iBAQxC,EAAK8C,YAAc,EAMnB,EAAK/F,SAAU,EAOf,EAAKgG,UAAY,GAMjB,EAAKC,eAAiB,KAEtB,EAAK9I,YAAc,KAEnB,EAAK+I,OAAS,KAEd,EAAKlD,QAAU,KAEf,EAAKmD,UAAY,KAGmB,mBAAzB,EAAKlO,OAAO6M,SACnB,MAAM,IAAInI,MAAM,iCAKpB,EAAKyJ,OAAS,EAAKnO,OAAO6M,SAKC,gBAAvB,EAAK7M,OAAO+K,UACZ,EAAK/K,OAAO+K,QAAU,gBAIE,YAAvB,EAAK/K,OAAO+K,SACe,yBAAxB,EAAK/K,OAAO+K,SACfhL,UAAS1C,UAAU0D,iBAAiBnF,KAAK,QAE1C,EAAKoE,OAAO+K,QAAU,gBAE1B,EAAKqD,QAAU,EAAKX,SAAS,EAAKzN,OAAO+K,SAKzC,EAAKsD,sBAAwB,GAE7B,EAAKC,aAAc,EAQnB,EAAKC,SAAU,EAKf,IAAIC,EAAY,EAgBhB,OAfA,EAAKC,UAAYlH,EAAKmH,UAClB,WAEQF,GAAa,EAAKP,OAAOU,QAAQC,aAChC,EAAK5O,OAAOiN,eAEbuB,EAAY,EAAKP,OAAOU,QAAQC,YAChC,EAAKX,OAAOpN,UAAU,aAGI,iBAA3B,EAAKb,OAAO+M,WACb,EAAK/M,OAAO+M,WACZ,KAGV,U,8CA1LU/M,GAEV,OADmB,IAAI0K,EAAW1K,GAChBI,W,kCAwMlB,OAJA/E,KAAKwT,gBAAgBxT,KAAK2E,OAAO0M,SACjCrR,KAAKyT,eACLzT,KAAK0T,gBACL1T,KAAK2T,kBACE3T,O,sCAWKqR,GAAS,WAarB,OAXAA,EAAQ9N,SAAQ,SAAAqQ,GAAM,OAAI,EAAKC,UAAUD,MAGzCvC,EAAQ9N,SAAQ,SAAAqQ,GAGPA,EAAOE,WACR,EAAKC,WAAWH,EAAOjT,SAG/BX,KAAKwF,UAAU,qBAAsB6L,GAC9BrR,O,yCAUP,OAAOA,KAAKgT,wB,gCAWNY,GAAQ,WACd,IAAKA,EAAOjT,KACR,MAAM,IAAI0I,MAAM,gCAEpB,IAAKuK,EAAOI,SACR,MAAM,IAAI3K,MAAJ,iBACQuK,EAAOjT,KADf,yCAMNiT,EAAOK,aACPnT,OAAOkD,KAAK4P,EAAOK,aAAa1Q,SAAQ,SAAA2Q,GAKpC,EAAKA,GAAoBN,EAAOK,YAAYC,MAIpD,IAAMC,EAAWP,EAAOI,SAiBxB,OAd8BlT,OAAOsT,oBACjClI,EAAK9J,SAASJ,WAEIuB,SAAQ,SAAA5B,GAC1BwS,EAASnS,UAAUL,GAAOuK,EAAK9J,SAASJ,UAAUL,MAQtD3B,KAAK4T,EAAOjT,MAAQ,IAAIwT,EAASP,EAAOjP,QAAU,GAAI3E,MACtDA,KAAKwF,UAAU,eAAgBoO,EAAOjT,MAC/BX,O,iCAWAW,GACP,IAAKX,KAAKW,GACN,MAAM,IAAI0I,MAAJ,iBAAoB1I,EAApB,6BASV,OAPIX,KAAKgT,sBAAsBrS,IAE3BX,KAAKqU,cAAc1T,GAEvBX,KAAKW,GAAMoE,OACX/E,KAAKgT,sBAAsBrS,IAAQ,EACnCX,KAAKwF,UAAU,qBAAsB7E,GAC9BX,O,oCAWGW,GACV,IAAKX,KAAKW,GACN,MAAM,IAAI0I,MAAJ,iBACQ1I,EADR,qDAIV,IAAKX,KAAKgT,sBAAsBrS,GAC5B,MAAM,IAAI0I,MAAJ,iBACQ1I,EADR,4CAIV,GAAkC,mBAAvBX,KAAKW,GAAM2T,QAClB,MAAM,IAAIjL,MAAJ,iBAAoB1I,EAApB,uCAMV,OAHAX,KAAKW,GAAM2T,iBACJtU,KAAKgT,sBAAsBrS,GAClCX,KAAKwF,UAAU,mBAAoB7E,GAC5BX,O,0CASS,WAChBc,OAAOkD,KAAKhE,KAAKgT,uBAAuBzP,SAAQ,SAAA5C,GAAI,OAChD,EAAK0T,cAAc1T,Q,qCAUZ,WACXX,KAAK4S,OAAS,IAAI5S,KAAK8S,OAAO9S,KAAK0N,UAAW1N,KAAK2E,QACnD3E,KAAK4S,OAAO7N,OACZ/E,KAAKwF,UAAU,iBAAkBxF,KAAK4S,SAEP,IAA3B5S,KAAK2E,OAAO+M,aACZvN,OAAOmJ,iBAAiB,SAAUtN,KAAKoT,WAAW,GAClDjP,OAAOmJ,iBAAiB,oBAAqBtN,KAAKoT,WAAW,IAGjEpT,KAAK4S,OAAO5P,GAAG,UAAU,WACrB,EAAKuR,aACL,EAAK3B,OAAO4B,SAAS,EAAK9E,QAAQzK,wBAItCjF,KAAK4S,OAAO5P,GAAG,SAAS,SAACJ,EAAG4R,GACxBrR,YAAW,kBAAM,EAAK4I,OAAOyI,KAAW,MAI5CxU,KAAK4S,OAAO5P,GAAG,UAAU,SAAAJ,GACjB,EAAK+B,OAAOoM,eACZ,EAAKwD,aAET,EAAK/O,UAAU,SAAU5C,Q,sCAUjB,WACR5C,KAAK0P,SACL1P,KAAK0P,QAAQ4E,UAGjBtU,KAAK0P,QAAU,IAAI1P,KAAK+S,QAAQ/S,KAAK2E,QACrC3E,KAAK0P,QAAQ3K,OACb/E,KAAKwF,UAAU,kBAAmBxF,KAAK0P,SAEvC1P,KAAK0P,QAAQ1M,GAAG,UAAU,WACtB,EAAK4P,OAAO4B,SAAS,EAAK9E,QAAQzK,qBAClC,EAAKO,UAAU,aAEnBxF,KAAK0P,QAAQ1M,GAAG,QAAQ,kBAAM,EAAKwC,UAAU,WAC7CxF,KAAK0P,QAAQ1M,GAAG,SAAS,kBAAM,EAAKwC,UAAU,YAE9CxF,KAAK0P,QAAQ1M,GAAG,gBAAgB,SAAA0F,GAC5B,EAAKkK,OAAO4B,SAAS,EAAK9E,QAAQzK,qBAClC,EAAKO,UAAU,eAAgBkD,MAKP,iBAAxB1I,KAAK2E,OAAO+K,SACY,yBAAxB1P,KAAK2E,OAAO+K,UAEZ1P,KAAK0P,QAAQ1M,GAAG,QAAQ,WACpB,EAAK4P,OAAO4B,SAAS,EAAK9E,QAAQzK,wBAGtCjF,KAAK0P,QAAQ1M,GAAG,UAAU,WACtB,IAAIyR,EAAY,EAAKC,YACrB,EAAKlP,UAAU,SAAUiP,GAErB,EAAK/E,QAAQhD,UAAY,EAAKA,UAC9B,EAAKA,QAAU,EAAKgD,QAAQhD,QAC5B,EAAKlH,UAAU,OAAQ,EAAKkH,gB,wCAYpC1M,KAAK2E,OAAOoM,gBACZ/Q,KAAK6S,UAAY,IAAI8B,a,oCAWzB,OAAO3U,KAAK0P,QAAQvK,gB,uCAUpB,OAAOnF,KAAK0P,QAAQtK,mB,qCASTwP,GACPA,GAAW5U,KAAKmF,cAChBnF,KAAK+L,OAAO,GAEZ/L,KAAK+L,OAAO6I,EAAU5U,KAAKmF,iB,2BAgB9B0F,EAAOC,GAAK,WAEb,OADA9K,KAAKwF,UAAU,eAAe,kBAAM,EAAKyG,KAAKpB,EAAOC,MAC9C9K,KAAK0P,QAAQzD,KAAKpB,EAAOC,K,iCASzB+J,GACP7U,KAAK0P,QAAQT,WAAW4F,K,8BAUxB,IAAK7U,KAAK0P,QAAQrE,WACd,OAAOrL,KAAK0P,QAAQ/G,U,kCAWxB,OAAO3I,KAAK0P,QAAQrE,WAAarL,KAAKiM,OAASjM,KAAK2I,U,kCAUpD,OAAQ3I,KAAK0P,QAAQrE,a,mCAUZuJ,GACT5U,KAAK8U,MAAMF,IAAY5U,KAAK2E,OAAOkN,c,kCAU3B+C,GACR5U,KAAK8U,KAAKF,GAAW5U,KAAK2E,OAAOkN,c,2BAYhCkD,GACD,IAAM7P,EAAWlF,KAAKmF,eAAiB,EACnC0P,EAAW7U,KAAKoF,kBAAoB,EACxCyP,EAAWnR,KAAKsH,IAAI,EAAGtH,KAAKqH,IAAI7F,EAAU2P,GAAYE,GAAU,KAChE/U,KAAKgV,cAAcH,EAAW3P,K,oCAWpBsP,GACVxU,KAAK+L,OAAOyI,GACZxU,KAAK4S,OAAOqC,SAAST,K,6BAalBA,GAAU,WAEb,GACwB,iBAAbA,IACNU,SAASV,IACVA,EAAW,GACXA,EAAW,EAEX,MAAM,IAAInL,MACN,gFAGRrJ,KAAKwF,UAAU,eAAe,kBAAM,EAAKuG,OAAOyI,MAEhD,IAAMnI,EAASrM,KAAK0P,QAAQrE,WAEvBgB,GACDrM,KAAK0P,QAAQ/G,QAGjB,IAAMwM,EAAkBnV,KAAK2E,OAAOiN,aACpC5R,KAAK2E,OAAOiN,cAAe,EAC3B5R,KAAK0P,QAAQ3D,OAAOyI,EAAWxU,KAAKmF,eACpCnF,KAAK4S,OAAO4B,SAASA,GAEhBnI,GACDrM,KAAK0P,QAAQzD,OAEjBjM,KAAK2E,OAAOiN,aAAeuD,EAC3BnV,KAAKwF,UAAU,OAAQgP,K,6BASvBxU,KAAK2I,QACL3I,KAAK+L,OAAO,GACZ/L,KAAK4S,OAAO4B,SAAS,K,gCAWfzL,GACN,OAAO/I,KAAK0P,QAAQxG,UAAUH,K,gCAUxB0L,GACNzU,KAAK0P,QAAQd,UAAU6F,GACvBzU,KAAKwF,UAAU,SAAUiP,K,kCAUzB,OAAOzU,KAAK0P,QAAQgF,c,sCAURU,GACZpV,KAAK0P,QAAQjI,gBAAgB2N,K,wCAS7B,OAAOpV,KAAK0P,QAAQ2F,oB,mCAYpBrV,KAAKsV,SAAStV,KAAK0M,W,8BAcf6I,GAEAA,IAASvV,KAAK0M,SAKd1M,KAAK0P,QAAQ4F,SAGbtV,KAAK0P,QAAQ4F,QAAQC,GACrBvV,KAAK0M,QAAU6I,GAEXA,GAGAvV,KAAKyS,YAAczS,KAAK0P,QAAQgF,YAChC1U,KAAK0P,QAAQd,UAAU,GACvB5O,KAAK0M,SAAU,EACf1M,KAAKwF,UAAU,SAAU,KAIzBxF,KAAK0P,QAAQd,UAAU5O,KAAKyS,aAC5BzS,KAAK0M,SAAU,EACf1M,KAAKwF,UAAU,SAAUxF,KAAKyS,cAGtCzS,KAAKwF,UAAU,OAAQxF,KAAK0M,UAzBxB1M,KAAKwF,UAAU,OAAQxF,KAAK0M,W,gCAmChC,OAAO1M,KAAK0M,U,mCAWZ,OAAO1M,KAAK0P,QAAQzJ,SAAW,K,qCAS/BjG,KAAK2E,OAAOiN,cAAgB5R,KAAK2E,OAAOiN,aACxC5R,KAAKuU,e,0CASLvU,KAAK2E,OAAO8L,UAAYzQ,KAAK2E,OAAO8L,W,qCASpC,OAAOzQ,KAAK2E,OAAOuN,Y,mCASVsD,GACTxV,KAAK2E,OAAOuN,UAAYsD,EACxBxV,KAAKuU,e,yCASL,OAAOvU,KAAK2E,OAAO2M,gB,uCASNkE,GACbxV,KAAK2E,OAAO2M,cAAgBkE,EAC5BxV,KAAKuU,e,2CASL,OAAOvU,KAAK2E,OAAOgL,kB,yCASJ6F,GACfxV,KAAK2E,OAAOgL,gBAAkB6F,EAC9BtJ,EAAKhI,MAAMlE,KAAK0N,UAAW,CAAE+H,WAAYzV,KAAK2E,OAAOgL,oB,uCAUrD,OAAO3P,KAAK2E,OAAOqL,c,qCAURwF,GACXxV,KAAK2E,OAAOqL,YAAcwF,EAC1BxV,KAAK4S,OAAO8C,iB,kCASZ,OAAO1V,KAAK2E,OAAO4L,S,gCASbA,GACNvQ,KAAK2E,OAAO4L,OAASA,EACrBvQ,KAAK4S,OAAO+C,UAAUpF,EAASvQ,KAAK2E,OAAOqM,YAC3ChR,KAAKuU,e,0CAgBWqB,GAChB5V,KAAK2E,OAAOmN,qBAAqBG,eAAiB2D,EAClD5V,KAAKuU,e,mCAUL,IAoBIlO,EApBEwP,EAAenS,KAAKoS,MACtB9V,KAAKmF,cACDnF,KAAK2E,OAAOkM,YACZ7Q,KAAK2E,OAAOqM,YAEd+E,EAAc/V,KAAK4S,OAAOoD,WAC5B/H,EAAQ4H,EAERhL,EAAQ,EACRC,EAAMpH,KAAKsH,IAAIH,EAAQkL,EAAa9H,GAYxC,GATIjO,KAAK2E,OAAO0L,cACVrQ,KAAK2E,OAAOiN,cAAgBiE,EAAeE,KAG7ClL,EAAQ,EACRC,EAFAmD,EAAQ8H,GAMR/V,KAAK2E,OAAOoM,cAAe,CAC3B,IAKI3Q,EALE6V,EAAYjW,KAAK6S,UAAUqD,oBAC7BjI,EACApD,EACAC,GAGJ,IAAK1K,EAAI,EAAGA,EAAI6V,EAAUpT,OAAQzC,IAC9BiG,EAAQrG,KAAK0P,QAAQyG,SACjBlI,EACAgI,EAAU7V,GAAG,GACb6V,EAAU7V,GAAG,IAEjBJ,KAAK4S,OAAOwD,UACR/P,EACA4H,EACAgI,EAAU7V,GAAG,GACb6V,EAAU7V,GAAG,SAIrBiG,EAAQrG,KAAK0P,QAAQyG,SAASlI,EAAOpD,EAAOC,GAC5C9K,KAAK4S,OAAOwD,UAAU/P,EAAO4H,EAAOpD,EAAOC,GAE/C9K,KAAKwF,UAAU,SAAUa,EAAO4H,K,2BAa/BoI,GACIA,GAIDrW,KAAK2E,OAAOkM,YAAcwF,EAC1BrW,KAAK2E,OAAOiN,cAAe,IAJ3B5R,KAAK2E,OAAOkM,YAAc7Q,KAAKsP,cAAcuB,YAC7C7Q,KAAK2E,OAAOiN,cAAe,GAM/B5R,KAAKuU,aACLvU,KAAK4S,OAAO4B,SAASxU,KAAK0P,QAAQzK,qBAElCjF,KAAK4S,OAAOqC,SAASjV,KAAKoF,iBAAmBpF,KAAKmF,eAClDnF,KAAKwF,UAAU,OAAQ6Q,K,sCASXxM,GAAa,WACzB7J,KAAKsW,kBAAkBzM,GAAa,SAAAI,GAC3B,EAAKgJ,aACN,EAAKsD,kBAAkBtM,Q,wCAYjBjE,GACdhG,KAAK0P,QAAQhB,KAAK1I,GAClBhG,KAAKuU,aACLvU,KAAKkT,SAAU,EACflT,KAAKwF,UAAU,W,+BASVgR,GAAM,WAELC,EAAS,IAAIC,WACnBD,EAAOnJ,iBAAiB,YAAY,SAAA1K,GAAC,OAAI,EAAK+T,WAAW/T,MACzD6T,EAAOnJ,iBAAiB,QAAQ,SAAA1K,GAAC,OAC7B,EAAKgU,gBAAgBhU,EAAEiU,OAAOC,WAElCL,EAAOnJ,iBAAiB,SAAS,kBAC7B,EAAK9H,UAAU,QAAS,yBAE5BiR,EAAOM,kBAAkBP,GACzBxW,KAAKgX,U,2BA8BJvJ,EAAKpH,EAAOsH,EAASzI,GACtB,IAAKuI,EACD,MAAM,IAAIpE,MAAM,iCAGpB,GADArJ,KAAKgX,QACDrJ,EAAS,CAGT,IAAMsJ,EAAuB,CACzB,+CACuD,IAAnD,CAAC,OAAQ,WAAY,QAAQC,QAAQvJ,GACzC,0BAA2BtH,EAC3B,mEAGW,IAFP,CAAC,eAAgB,wBAAwB6Q,QACrClX,KAAK2E,OAAO+K,SAEpB,4BAA4C,iBAARjC,GAElC0J,EAAgBrW,OAAOkD,KAAKiT,GAAsBrP,QACpD,SAAAwP,GAAM,OAAIH,EAAqBG,MAE/BD,EAActU,SAEdwU,QAAQC,KACJ,sEACIH,EAAcI,KAAK,WAG3B5J,EAAU,MAIlB,OAAQ3N,KAAK2E,OAAO+K,SAChB,IAAK,WACD,OAAO1P,KAAKwX,WAAW/J,EAAKpH,EAAOnB,GACvC,IAAK,eACL,IAAK,uBACD,OAAOlF,KAAKyX,iBAAiBhK,EAAKpH,EAAOsH,EAASzI,M,iCAanDuI,EAAKpH,EAAOnB,GAAU,WACvBwJ,EAAO,SAAAgJ,GAIT,OAHIA,GACA,EAAKhF,UAAUjQ,KAAK,EAAKkV,KAAK,QAASD,IAEpC,EAAKE,eAAenK,GAAK,SAAAxD,GAAI,OAAI,EAAK2M,gBAAgB3M,OAGjE,IAAI5D,EAKA,OAAOqI,IAJP1O,KAAK0P,QAAQmI,SAASxR,EAAOnB,GAC7BlF,KAAKuU,aACLvU,KAAK0S,UAAUjQ,KAAKzC,KAAK2X,KAAK,cAAejJ,M,uCAkBpCoJ,EAAUzR,EAAOsH,EAASzI,GAAU,WAC7CuI,EAAMqK,EAEV,GAAwB,iBAAbA,EACP9X,KAAK0P,QAAQhB,KAAKjB,EAAKzN,KAAK4Q,eAAgBvK,EAAOsH,OAChD,CACH,IAAMa,EAAMsJ,EACZ9X,KAAK0P,QAAQqI,QAAQvJ,EAAKnI,GAI1BoH,EAAMe,EAAIR,IAGdhO,KAAK0S,UAAUjQ,KACXzC,KAAK0P,QAAQiI,KAAK,WAAW,WAEpB,EAAKjI,QAAQ7I,YACd,EAAK0N,aACL,EAAKrB,SAAU,EACf,EAAK1N,UAAU,aAGvBxF,KAAK0P,QAAQiI,KAAK,SAAS,SAAAK,GAAG,OAAI,EAAKxS,UAAU,QAASwS,OAM1D3R,GACArG,KAAK0P,QAAQmI,SAASxR,EAAOnB,GAI3BmB,IAASrG,KAAK2E,OAAO2L,cACvBtQ,KAAK0P,QAAQhK,oBAEb1F,KAAK4X,eAAenK,GAAK,SAAA5D,GACrB,EAAKyM,kBAAkBzM,GAAa,SAAA7D,GAChC,EAAK0J,QAAQ1J,OAASA,EACtB,EAAK0J,QAAQmI,SAAS,MACtB,EAAKtD,aACL,EAAK/O,UAAU,0B,wCAabqE,EAAanH,GAAU,WACrC1C,KAAK6J,YAAcA,EACnB7J,KAAK0P,QAAQ4G,kBACTzM,GACA,SAAAI,GAGS,EAAKgJ,aAAe,EAAKpJ,aAAeA,IACzCnH,EAASuH,GACT,EAAKJ,YAAc,SAG3B,kBAAM,EAAKrE,UAAU,QAAS,mC,qCAYvBiI,EAAK/K,GAAU,WACtBuV,EAAUnX,OAAOwR,OACjB,CACI7E,IAAKA,EACLyK,aAAc,eAElBlY,KAAK2E,OAAOwN,KAEVgG,EAAUjM,EAAKkM,UAAUH,GAkB/B,OAhBAjY,KAAK2S,eAAiBwF,EAEtBnY,KAAK0S,UAAUjQ,KACX0V,EAAQnV,GAAG,YAAY,SAAAJ,GACnB,EAAK+T,WAAW/T,MAEpBuV,EAAQnV,GAAG,WAAW,SAAAiH,GAClBvH,EAASuH,GACT,EAAK0I,eAAiB,QAE1BwF,EAAQnV,GAAG,SAAS,SAAAJ,GAChB,EAAK4C,UAAU,QAAS5C,GACxB,EAAK+P,eAAiB,SAIvBwF,I,iCAUAvV,GACP,IAAIyV,EAEAA,EADAzV,EAAE0V,iBACgB1V,EAAE2V,OAAS3V,EAAE4V,MAIb5V,EAAE2V,QAAU3V,EAAE2V,OAAS,KAE7CvY,KAAKwF,UAAU,UAAW9B,KAAKoS,MAAwB,IAAlBuC,GAAwBzV,EAAEiU,U,gCAczDhU,EAAQ4V,EAAUC,EAAU7N,EAAOC,GACzCjI,EAASA,GAAU,KACnBgI,EAAQA,GAAS,EACjB4N,EAAWA,GAAY,IACvBC,EAAWA,IAAY,EACvB,IAAMrS,EAAQrG,KAAK0P,QAAQyG,SAAStT,EAAQgI,EAAOC,GAC7C6N,EAAM,GAAGC,IAAIrY,KACf8F,GACA,SAAAwS,GAAG,OAAInV,KAAKoS,MAAM+C,EAAMJ,GAAYA,KAExC,OAAO,IAAItP,SAAQ,SAAC2P,EAAS1P,GACzB,IAAM2P,EAAOC,KAAKC,UAAUN,GAEvBD,GACDvU,OAAO+U,KACH,uCACIC,mBAAmBJ,IAG/BD,EAAQC,Q,kCAsBJK,EAAQC,EAASC,GAWzB,OAVKF,IACDA,EAAS,aAERC,IACDA,EAAU,GAETC,IACDA,EAAO,WAGJtZ,KAAK4S,OAAO2G,SAASH,EAAQC,EAASC,K,mCAOzCtZ,KAAK2S,gBAAkB3S,KAAK2S,eAAe6G,aAC3CxZ,KAAK2S,eAAe6G,WAAWC,QAC/BzZ,KAAK2S,eAAiB,Q,uCAQ1B3S,KAAK0S,UAAUnP,SAAQ,SAAAX,GAAC,OAAIA,EAAED,U,8BAOzB3C,KAAK0P,QAAQrE,aACdrL,KAAK2L,OACL3L,KAAK0P,QAAQxE,oBAEjBlL,KAAKkT,SAAU,EACflT,KAAK0Z,aACL1Z,KAAK2Z,iBAGL3Z,KAAK4S,OAAO4B,SAAS,GACrBxU,KAAK4S,OAAOgH,SAAS,GACrB5Z,KAAK4S,OAAOwD,UAAU,CAAEvT,OAAQ7C,KAAK4S,OAAOoD,YAAc,K,gCAS1DhW,KAAK6Z,oBACL7Z,KAAKwF,UAAU,WACfxF,KAAK0Z,aACL1Z,KAAK2Z,iBACL3Z,KAAKsL,SAC0B,IAA3BtL,KAAK2E,OAAO+M,aACZvN,OAAOkJ,oBAAoB,SAAUrN,KAAKoT,WAAW,GACrDjP,OAAOkJ,oBACH,oBACArN,KAAKoT,WACL,IAGJpT,KAAK0P,SACL1P,KAAK0P,QAAQ4E,UAEbtU,KAAK4S,QACL5S,KAAK4S,OAAO0B,UAEhBtU,KAAKiT,aAAc,EACnBjT,KAAKkT,SAAU,EACflT,KAAK6J,YAAc,S,GAn8CaqC,EAAK9J,U,YAAxBiN,EAuFVyK,QAAUC,QAvFA1K,EA4GVnD,KAAOA,E,6GC1RH,SAAc+L,GACzB,IAAMjE,EAAW,IAAI5R,UACf+P,EAAM,IAAI6H,eACZC,GAAW,EACf9H,EAAI+G,KAAKjB,EAAQiC,QAAU,MAAOjC,EAAQxK,KAAK,GAC/C0E,EAAI+F,aAAeD,EAAQC,cAAgB,OAEvCD,EAAQ9F,MACJ8F,EAAQ9F,IAAIgI,gBAEZlC,EAAQ9F,IAAIgI,eAAe5W,SAAQ,SAAA6W,GAC/BjI,EAAIkI,iBAAiBD,EAAOzY,IAAKyY,EAAO/Y,UAG5C4W,EAAQ9F,IAAImI,kBAEZnI,EAAImI,iBAAkB,IAwB9B,OApBAnI,EAAI7E,iBAAiB,YAAY,SAAA1K,GAC7BoR,EAASxO,UAAU,WAAY5C,GAC3BA,EAAE0V,kBAAoB1V,EAAE2V,QAAU3V,EAAE4V,QACpCyB,GAAW,MAGnB9H,EAAI7E,iBAAiB,QAAQ,SAAA1K,GACpBqX,GACDjG,EAASxO,UAAU,WAAY5C,GAEnCoR,EAASxO,UAAU,OAAQ5C,GACvB,KAAOuP,EAAIoI,QAAU,KAAOpI,EAAIoI,OAChCvG,EAASxO,UAAU,UAAW2M,EAAIqI,SAAU5X,GAE5CoR,EAASxO,UAAU,QAAS5C,MAGpCuP,EAAI7E,iBAAiB,SAAS,SAAA1K,GAAC,OAAIoR,EAASxO,UAAU,QAAS5C,MAC/DuP,EAAIsI,OACJzG,EAAS7B,IAAMA,EACR6B,GAnFX,I,EAAA,G,EAAA,O,wICOe,SAAa0G,GACxB,IAAIC,GAAW9L,IAMf,OALA/N,OAAOkD,KAAK0W,GAAQnX,SAAQ,SAAAnD,GACpBsa,EAAOta,GAAKua,IACZA,EAAUD,EAAOta,OAGlBua,G,6GCPI,SAAaD,GACxB,IAAIE,EAAWC,OAAOhM,KAMtB,OALA/N,OAAOkD,KAAK0W,GAAQnX,SAAQ,SAAAnD,GACpBsa,EAAOta,GAAKwa,IACZA,EAAWF,EAAOta,OAGnBwa,G,6GCJI,SAAgBrR,GAC3B8N,QAAQC,KAAK,wDADgC,2BAATwD,EAAS,iCAATA,EAAS,kBAO7C,OALAA,EAAQvX,SAAQ,SAAAkD,GACZ3F,OAAOkD,KAAKyC,GAAQlD,SAAQ,SAAA5B,GACxB4H,EAAK5H,GAAO8E,EAAO9E,SAGpB4H,G,6GCPI,SAAewR,GAC1B,OAAO,sCAAI9X,EAAJ,yBAAIA,EAAJ,uBAAa,cAAkB,kBAAM8X,EAAI,WAAJ,EAAQ9X,QAXxD,I,EAAA,G,EAAA,O,8DCcA,SAASoQ,EAAS0H,EAAMC,EAAMC,GAC5B,IAAIC,EAASjY,EAAMkY,EAASC,EAAWtE,EAGvC,SAASuE,IACP,IAAIhR,EAAOiR,KAAKC,MAAQH,EAEpB/Q,EAAO2Q,GAAQ3Q,GAAQ,EACzB6Q,EAAU/X,WAAWkY,EAAOL,EAAO3Q,IAEnC6Q,EAAU,KACLD,IACHnE,EAASiE,EAAK7X,MAAMiY,EAASlY,GAC7BkY,EAAUlY,EAAO,OAXnB,MAAQ+X,IAAMA,EAAO,KAgBzB,IAAIQ,EAAY,WACdL,EAAUnb,KACViD,EAAOwY,UACPL,EAAYE,KAAKC,MACjB,IAAIG,EAAUT,IAAcC,EAO5B,OANKA,IAASA,EAAU/X,WAAWkY,EAAOL,IACtCU,IACF5E,EAASiE,EAAK7X,MAAMiY,EAASlY,GAC7BkY,EAAUlY,EAAO,MAGZ6T,GAoBT,OAjBA0E,EAAUG,MAAQ,WACZT,IACFU,aAAaV,GACbA,EAAU,OAIdM,EAAUK,MAAQ,WACZX,IACFpE,EAASiE,EAAK7X,MAAMiY,EAASlY,GAC7BkY,EAAUlY,EAAO,KAEjB2Y,aAAaV,GACbA,EAAU,OAIPM,EAITnI,EAASA,SAAWA,EAEpBxT,EAAOD,QAAUyT,G,6BC/DjB,SAASyI,EAAoBvZ,GACzBA,EAAMwZ,kBACNnO,SAASoO,KAAK3O,oBAAoB,QAASyO,GAAqB,G,2DAQrD,SAAsBpB,GACjC9M,SAASoO,KAAK1O,iBAAiB,QAASwO,GAAqB,I,6GCgGlD,SAAmB7D,GAC9B,IAAKA,EACD,MAAM,IAAI5O,MAAM,yBACb,IAAK4O,EAAQxK,IAChB,MAAM,IAAIpE,MAAM,qBAEpB,IAAM2K,EAAW,IAAI5R,UACf6Z,EAAe,IAAIC,QACnBC,EAAe,IAAIC,QAAQnE,EAAQxK,KAGzCuG,EAASwF,WAAa,IAAI6C,gBAGtBpE,GAAWA,EAAQkC,gBAEnBlC,EAAQkC,eAAe5W,SAAQ,SAAA6W,GAC3B6B,EAAaK,OAAOlC,EAAOzY,IAAKyY,EAAO/Y,UAK/C,IAAM6W,EAAeD,EAAQC,cAAgB,OACvCqE,EAAe,CACjBrC,OAAQjC,EAAQiC,QAAU,MAC1BsC,QAASP,EACT1a,KAAM0W,EAAQ1W,MAAQ,OACtBkb,YAAaxE,EAAQwE,aAAe,cACpCC,MAAOzE,EAAQyE,OAAS,UACxBC,SAAU1E,EAAQ0E,UAAY,SAC9BC,SAAU3E,EAAQ2E,UAAY,SAC9BC,OAAQ7I,EAASwF,WAAWqD,QAgFhC,OA7EAC,MAAMX,EAAcI,GACfQ,MAAK,SAAAvC,GAEFxG,EAASwG,SAAWA,EAEpB,IAAIwC,GAAoB,IAEnBxC,EAASwB,MACVpO,SAASqP,cACT,OAAOC,KAAKC,UAAUC,cAItBJ,GAAoB,GAIxB,IAAMK,EAAgB7C,EAASgC,QAAQvb,IAAI,kBAQ3C,OAPsB,OAAlBoc,IAIAL,GAAoB,GAGnBA,GAMLhJ,EAAS2C,WAAa,SAAA/T,GAClBoR,EAASxO,UAAU,WAAY5C,IAG5B,IAAI0a,SACP,IAAIC,eACA,IAAIC,EAAgBxJ,EAAUqJ,EAAe7C,IAEjD+B,IAZO/B,KAeduC,MAAK,SAAAvC,GACF,IAAIiD,EACJ,GAAIjD,EAASkD,GACT,OAAQxF,GACJ,IAAK,cACD,OAAOsC,EAASmD,cAEpB,IAAK,OACD,OAAOnD,EAASzB,OAEpB,IAAK,OACD,OAAOyB,EAAShE,OAEpB,IAAK,OACD,OAAOgE,EAASoD,OAEpB,QACIH,EAAS,yBAA2BvF,EAOhD,MAHKuF,IACDA,EAAS,sBAAwBjD,EAASD,QAExC,IAAIlR,MAAMoU,MAEnBV,MAAK,SAAAvC,GACFxG,EAASxO,UAAU,UAAWgV,MAEjCqD,OAAM,SAAA/Q,GACHkH,EAASxO,UAAU,QAASsH,MAIpCkH,EAASmI,aAAeA,EACjBnI,GA5NX,I,EAAA,G,EAAA,O,qMAEMwJ,E,WAQF,WAAYxJ,EAAUqJ,EAAe7C,I,4FAAU,SAC3Cxa,KAAKgU,SAAWA,EAChBhU,KAAKgU,SAAS8J,QAAUtD,EAASwB,KAAK+B,YAEtC/d,KAAKwY,MAAQwF,SAASX,EAAe,IACrCrd,KAAKuY,OAAS,E,qDAUZiB,GAAY,YACD,SAAPyE,IAGF,EAAKjK,SAAS8J,QACTG,OACAlB,MAAK,YAAqB,IAAlBmB,EAAkB,EAAlBA,KAAM7c,EAAY,EAAZA,MAIX,GAAI6c,EAWA,OATmB,IAAf,EAAK1F,OACL,EAAKxE,SAAS2C,WAAWpW,KAAK,EAAKyT,SAAU,CACzCuE,OAAQ,EAAKA,OACbC,MAAO,EAAKA,MACZF,kBAAkB,SAI1BkB,EAAWpO,QAIf,EAAKmN,QAAUlX,EAAM8c,WACrB,EAAKnK,SAAS2C,WAAWpW,KAAK,EAAKyT,SAAU,CACzCuE,OAAQ,EAAKA,OACbC,MAAO,EAAKA,MACZF,mBAAmC,IAAf,EAAKE,SAG7BgB,EAAW4E,QAAQ/c,GACnB4c,OAEHJ,OAAM,SAAA/Q,GACH0M,EAAW1M,MAAMA,MAI7BmR,Q,oJCpER,eACA,E,maAAA,OACA,W,y2CASqBxM,E,sQAKjB,WAAY/D,EAAW/I,GAAQ,a,4FAAA,UAC3B,cAAM+I,EAAW/I,IAKZgM,eAAiBhM,EAAOgM,eAK7B,EAAK0N,sBAAwB3a,KAAKoS,MAC9BnR,EAAOgM,eAAiBhM,EAAOqM,YASnC,EAAKsN,kBAAoB3Z,EAAOuN,WAAavN,EAAO2M,cAKpD,EAAKiN,UAAY,GAAM5Z,EAAOqM,WAO9B,EAAKwN,SAAW,GAKhB,EAAKC,aAAe,KAOpB,EAAKC,WAAaC,UAOlB,EAAKC,wBAA0Bja,EAAOwL,yBAQtC,EAAK0O,QAAU,EAAInb,KAAKob,KAAKna,EAAOqM,WAAa,GAOjD,EAAKnB,UAAYlL,EAAOkL,WAAa,EAnEV,E,4CA0E3B7P,KAAK+e,gBACL/e,KAAKgf,mB,uCAQLhf,KAAKye,aAAeze,KAAKsT,QAAQhF,YAC7BtO,KAAKkE,MAAM0J,SAASC,cAAc,QAAS,CACvCgH,SAAU,WACVoK,OAAQ,EACRC,KAAM,EACNC,IAAK,EACLC,OAAQ,EACRC,SAAU,SACVpR,MAAO,IACPqR,QAAS,OACTC,UAAW,aACXC,iBAAkB,QAClBC,cAAe,UAIvBzf,KAAK0f,YACL1f,KAAK0V,iB,qCAOL1V,KAAKkE,MAAMlE,KAAKye,aAAc,CAC1BkB,iBAAkB3f,KAAK2E,OAAOsL,YAAc,KAC5C2P,iBAAkB5f,KAAK2E,OAAOqL,gB,mCAclC,IAPS,WACH6P,EAAanc,KAAKoS,MAAM9V,KAAKiO,MAAQjO,KAAK2E,OAAOqM,YACjD8O,EAAmBpc,KAAKob,KAC1Be,GAAc7f,KAAKqe,sBAAwBre,KAAK6e,UAI7C7e,KAAKwe,SAAS3b,OAASid,GAC1B9f,KAAK0f,YAIT,KAAO1f,KAAKwe,SAAS3b,OAASid,GAC1B9f,KAAK+f,eAGT,IAAIC,EAAchgB,KAAK2Q,eAAiB3Q,KAAK6e,QACvCoB,EAAajgB,KAAKwe,SAAS3b,OAAS,EAC1C7C,KAAKwe,SAASjb,SAAQ,SAAC2c,EAAO9f,GACtBA,GAAK6f,IACLD,EAAc,EAAK/R,MAAQ,EAAK0C,eAAiBsP,GAErD,EAAKE,iBAAiBD,EAAOF,EAAa,EAAKzP,QAE/C2P,EAAME,eAGVpgB,KAAKkE,MAAMlE,KAAKye,aAAc,CAAExQ,MAAO4R,EAAa,OACpD7f,KAAKkE,MAAMlE,KAAKye,aAAc,CAAE,YAAaze,KAAKqgB,UAAUR,O,kCAQ5D,IAAMK,EAAQ,IAAIlgB,KAAK0e,WACvBwB,EAAMtB,wBAA0B5e,KAAK4e,wBACrCsB,EAAM5B,kBAAoBte,KAAKse,kBAC/B4B,EAAM3B,UAAYve,KAAKue,UACvB,IAAM+B,EAAatgB,KAAKqe,sBAAwBre,KAAKwe,SAAS3b,OAG9Dqd,EAAMK,SACFvgB,KAAKsT,QAAQhF,YACTtO,KAAKkE,MAAM0J,SAASC,cAAc,UAAW,CACzCgH,SAAU,WACVoK,OAAQ,EACRC,KAAMoB,EAAa,KACnBnB,IAAK,EACLC,OAAQ,EACR7O,OAAQ,OACRkP,cAAe,WAMvBzf,KAAKse,mBACL4B,EAAMM,aACFxgB,KAAKye,aAAanQ,YACdtO,KAAKkE,MAAM0J,SAASC,cAAc,UAAW,CACzCgH,SAAU,WACVqK,KAAMoB,EAAa,KACnBnB,IAAK,EACLC,OAAQ,EACR7O,OAAQ,WAMxBvQ,KAAKwe,SAAS/b,KAAKyd,K,qCAQnB,IAAIO,EAAYzgB,KAAKwe,SAASxe,KAAKwe,SAAS3b,OAAS,GAGrD4d,EAAUC,KAAKC,cAActS,YAAYoS,EAAUC,MAG/C1gB,KAAKse,mBACLmC,EAAUjM,SAASmM,cAActS,YAAYoS,EAAUjM,UAIvDiM,IACAA,EAAUnM,UACVmM,EAAY,MAGhBzgB,KAAKwe,SAASoC,Q,uCAUDV,EAAOjS,EAAOsC,GAC3B,IAAMsQ,EAAend,KAAKoS,MAAM7H,EAAQjO,KAAK2E,OAAOqM,YAC9C6O,EAAanc,KAAKoS,MAAM9V,KAAKiO,MAAQjO,KAAK2E,OAAOqM,YAGvDkP,EAAMC,iBAAiBU,EAAchB,EAAY5R,EAAOsC,GAGxDvQ,KAAKkE,MAAMlE,KAAKye,aAAc,CAAEa,QAAS,Y,kCAMjC,WACRpT,EAAKsB,OAAM,WACP,EAAKgR,SAASjb,SAAQ,SAAA2c,GAAK,OAAIA,EAAME,iBADzClU,K,+BAkBK7F,EAAOya,EAAcjW,EAAOC,GAAK,WACtC,OAAO9K,KAAK+gB,YACR1a,EACAya,EACAjW,EACAC,GACA,YAA2D,IAAxDkW,EAAwD,EAAxDA,OAAQC,EAAgD,EAAhDA,WAAoBC,GAA4B,EAApC3Q,OAAoC,EAA5B2Q,SAASC,EAAmB,EAAnBA,MAAO9a,EAAY,EAAZA,MAG3C,QAAc5C,IAAVoH,EAsBJ,IAlBA,IAAMuW,EAAiBH,EAAa,EAAI,EAClCpe,EAASwD,EAAMxD,OAASue,EACxBC,EAAM,EAAK1c,OAAO2c,SAAW,EAAK3c,OAAOqM,WAQzCuQ,EAAOF,GANc,OAAvB,EAAK1c,OAAOmL,OACNpM,KAAKsH,IAAI,EAAKrG,OAAOqM,cAAeqQ,EAAM,IAC1C3d,KAAKsH,IACH,EAAKrG,OAAOqM,WACZ,EAAKrM,OAAOmL,OAAS,EAAKnL,OAAOqM,aAIvCwQ,EAAQ3e,EAAS,EAAKoL,MAEtB5D,EAAOS,EACT1K,EAFUyK,EAGV4W,EAAW,EAAK9c,OAAO4M,WAAa,EAAI,EAEpCnR,EAAIiK,EAAMjK,GAAKmhB,EAAM,CACzB,IAAMG,EACFrb,EAAM3C,KAAKie,MAAMvhB,EAAIohB,EAAQJ,KAAoB,EACjDQ,OAAC,EAWI,IARLA,EADA,EAAKjd,OAAO4M,WACR7N,KAAKoS,MAAO4L,EAAOV,EAAUG,GAG7Bzd,KAAKme,IAAIne,KAAKoS,MAAO4L,EAAOV,EAAUG,MAKhC,EAAKxc,OAAOoL,eACtB6R,EAAI,EAAKjd,OAAOoL,cAGpB,EAAK+R,SACD1hB,EAAI,EAAKme,UACT4C,EAAQM,EAAWG,EAAIH,EAAWP,EAClCG,EAAM,EAAK9C,UACP,EAAJqD,EAAQH,EACR,EAAK5R,iB,+BAoBhBxJ,EAAOya,EAAcjW,EAAOC,GAAK,WACtC,OAAO9K,KAAK+gB,YACR1a,EACAya,EACAjW,EACAC,GACA,YAAyE,IAAtEkW,EAAsE,EAAtEA,OAAQC,EAA8D,EAA9DA,WAAoBC,GAA0C,EAAlD3Q,OAAkD,EAA1C2Q,SAASC,EAAiC,EAAjCA,MAAO9a,EAA0B,EAA1BA,MAAOya,EAAmB,EAAnBA,aAClD,IAAKG,EAAY,CAIb,IAHA,IAAMc,EAAiB,GACjBC,EAAM3b,EAAMxD,OACdzC,EAAI,EACAA,EAAI4hB,EAAK5hB,IACb2hB,EAAe,EAAI3hB,GAAKiG,EAAMjG,GAC9B2hB,EAAe,EAAI3hB,EAAI,IAAMiG,EAAMjG,GAEvCiG,EAAQ0b,OAKEte,IAAVoH,GACA,EAAKoX,SAAS5b,EAAO2a,EAAQG,EAAOD,EAASrW,EAAOC,EAAKgW,GAI7D,EAAKgB,SACD,EACAX,EAAQD,EAAU,EAAK3C,UACvB,EAAKtQ,MACL,EAAKsQ,UACL,EAAK1O,gB,+BAmBZxJ,EAAO2a,EAAQG,EAAOD,EAASrW,EAAOC,EAAKgW,GAAc,aACzB9gB,KAAK2E,OAAOmN,qBAAqBE,cAAc8O,IAAiB,GAA7F5O,EADsD,EACtDA,UAAWZ,EAD2C,EAC3CA,cACnBtR,KAAKwe,SAASjb,SAAQ,SAAC2c,EAAO9f,GAC1B,EAAK8hB,cAAchC,EAAOhO,EAAWZ,GACrC4O,EAAMiC,UAAU9b,EAAO2a,EAAQG,EAAOD,EAASrW,EAAOC,Q,+BAarDsX,EAAGC,EAAGpU,EAAOsC,EAAQ+R,GAO1B,IANA,IAAMC,EAAc7e,KAAKie,MAAMS,EAAIpiB,KAAK2Q,gBAClC6R,EAAY9e,KAAKqH,IACnBrH,KAAKob,MAAMsD,EAAInU,GAASjO,KAAK2Q,gBAAkB,EAC/C3Q,KAAKwe,SAAS3b,QAEdzC,EAAImiB,EACAniB,EAAIoiB,EAAWpiB,IAAK,CACxB,IAAM8f,EAAQlgB,KAAKwe,SAASpe,GACtBkgB,EAAalgB,EAAIJ,KAAK2Q,eAEtB8R,EAAe,CACjBC,GAAIhf,KAAKsH,IAAIoX,EAAGhiB,EAAIJ,KAAK2Q,gBACzBgS,GAAIN,EACJO,GAAIlf,KAAKqH,IACLqX,EAAInU,EACJ7N,EAAIJ,KAAK2Q,eAAiBuP,EAAMQ,KAAKzS,OAEzC4U,GAAIR,EAAI9R,GAGRkS,EAAaC,GAAKD,EAAaG,KAC/B5iB,KAAKkiB,cAAchC,GAEnBA,EAAM4C,UACFL,EAAaC,GAAKpC,EAClBmC,EAAaE,GACbF,EAAaG,GAAKH,EAAaC,GAC/BD,EAAaI,GAAKJ,EAAaE,GAC/BL,O,kCAYJxB,GACR,OAAO9gB,KAAK2E,OAAO2F,eAAiBtK,KAAK2E,OAAOmN,qBAAqBG,eAAe5O,SAASyd,K,kCAmBrFza,EAAOya,EAAcjW,EAAOC,EAAKtI,EAAIugB,GAAW,WACxD,OAAO7W,EAAKsB,OAAM,WAEd,GAAInH,EAAM,aAAc2c,MAAO,CAC3B,IAAM9Y,EAAW7D,EAEjB,GAAI,EAAK1B,OAAO2F,cAAe,CAC3B,IAAM2Y,EAAoB/Y,EAAStC,QAAO,SAACnH,EAAGL,GAAJ,OAAW,EAAK8iB,YAAY9iB,MAStE,OARK,EAAKuE,OAAOmN,qBAAqBC,SAClC,EAAK4D,UACDjS,KAAKsH,IAAIiY,EAAiBpgB,OAAQ,GAC9B,EAAK8B,OAAO4L,OACZ,EAAK5L,OAAOqM,YAIjB9G,EAAS3G,SAAQ,SAAC4f,EAAc/iB,GAAf,OACpB,EAAK2gB,YAAYoC,EAAc/iB,EAAGyK,EAAOC,EAAKtI,EAAIygB,EAAiB/L,QAAQiM,OAGnF9c,EAAQ6D,EAAS,GAIrB,IAAI,EAAKgZ,YAAYpC,GAArB,CAOA,IAAIE,EAAS,EAAI,EAAKrc,OAAOiL,UAC7B,GAAI,EAAKjL,OAAOmM,UAAW,CACvB,IAAM9F,EAAMkB,EAAKlB,IAAI3E,GACf0E,EAAMmB,EAAKnB,IAAI1E,GACrB2a,GAAUjW,EAAMC,GAAOD,EAAMC,EAKjC,IAAMiW,EAAa,GAAGmC,KAAK7iB,KAAK8F,GAAO,SAAAwS,GAAG,OAAIA,EAAM,KAC9CtI,EAAS,EAAK5L,OAAO4L,OAAS,EAAK5L,OAAOqM,WAIhD,OAAOxO,EAAG,CACNwe,OAAQA,EACRC,WAAYA,EACZ1Q,OAAQA,EACR2Q,QAPY3Q,EAASwS,GAAa,EAQlC5B,MAPU5Q,EAAS,EAQnBlK,MAAOA,EACPya,aAAcA,OAnDf5U,K,oCA+DGgU,GAAqF,IAA9EhO,EAA8E,uDAAlElS,KAAK2E,OAAOuN,UAAWZ,EAA2C,uDAA3BtR,KAAK2E,OAAO2M,cAChF4O,EAAMgC,cAAchQ,EAAWZ,K,+BAiB1B8H,EAAQC,EAASC,GACtB,GAAa,SAATA,EACA,OAAOnQ,QAAQka,IACXrjB,KAAKwe,SAAS5F,KAAI,SAAAsH,GACd,OAAOA,EAAM3G,SAASH,EAAQC,EAASC,OAG5C,GAAa,YAATA,EAAoB,CAC3B,IAAIgK,EAAStjB,KAAKwe,SAAS5F,KAAI,SAAAsH,GAAK,OAChCA,EAAM3G,SAASH,EAAQC,EAASC,MAEpC,OAAOgK,EAAOzgB,OAAS,EAAIygB,EAASA,EAAO,M,gCAazCC,GACN,0BAAoBA,EAApB,iB,qCAQW1O,GACX,IAAI2O,EAAcxjB,KAAKiO,MAAQjO,KAAK2E,OAAOqM,WAE3ChR,KAAKkE,MAAMlE,KAAKye,aAAc,CAAE,YAAaze,KAAKqgB,UAAUmD,EAAc3O,U,8BAnkBzC/B,W,gICXzC,M,maAAA,O,szCAOqBA,E,sQAKjB,WAAYpF,EAAW/I,GAAQ,a,4FAAA,UAC3B,gBAEK+I,UAAYA,EAIjB,EAAK/I,OAASA,EAKd,EAAKsJ,MAAQ,EAKb,EAAKsC,OAAS5L,EAAO4L,OAAS,EAAK5L,OAAOqM,WAE1C,EAAKyS,QAAU,EAKf,EAAKnQ,QAAU,KAxBY,E,2CAkCzBxP,EAAIC,GACN,OAAOmI,EAAKhI,MAAMJ,EAAIC,K,sCAQtB/D,KAAKsT,QAAUtT,KAAK0N,UAAUY,YAC1BV,SAASC,cAAc,SAG3B7N,KAAKkE,MAAMlE,KAAKsT,QAAS,CACrBgM,QAAS,QACTzK,SAAU,WACV6O,WAAY,OACZC,iBAAkB,OAClBpT,OAAQvQ,KAAK2E,OAAO4L,OAAS,QAG7BvQ,KAAK2E,OAAO0L,YAAcrQ,KAAK2E,OAAOiN,eACtC5R,KAAKkE,MAAMlE,KAAKsT,QAAS,CACrBrF,MAAO,OACP2V,UAAW5jB,KAAK2E,OAAO6L,cAAgB,SAAW,OAClDqT,UAAW,WAInB7jB,KAAK8jB,uB,kCAUGlhB,EAAGmhB,IACVA,GAAanhB,EAAEohB,iBAEhB,IAQIxP,EAREyP,EAAUrhB,EAAEshB,cACZthB,EAAEshB,cAAc,GAAGD,QACnBrhB,EAAEqhB,QACFE,EAAOnkB,KAAKsT,QAAQ8Q,wBAEpBvO,EAAe7V,KAAKiO,MACpB8H,EAAc/V,KAAKgW,WAoBzB,OAjBKhW,KAAK2E,OAAO0L,YAAcwF,EAAeE,GAC1CvB,GACKxU,KAAK2E,OAAOgN,IAAMwS,EAAKE,MAAQJ,EAAUA,EAAUE,EAAKjF,OACpDlf,KAAK2E,OAAOqM,WAAa6E,IAAiB,GAEpC,IACXrB,EAAW,GAGfA,IACMxU,KAAK2E,OAAOgN,IACRwS,EAAKE,MAAQJ,EACbA,EAAUE,EAAKjF,MACjBlf,KAAKsT,QAAQgR,YACbtkB,KAAKsT,QAAQiR,aAAe,EAGjC/P,I,2CAGU,WACjBxU,KAAKsT,QAAQhG,iBAAiB,SAAS,SAAA1K,GACnC,IAAM4hB,EACF,EAAKlR,QAAQmR,aAAe,EAAKnR,QAAQoR,aAC7C,GAAwB,IAApBF,EAAuB,CAEvB,IAAML,EAAO,EAAK7Q,QAAQ8Q,wBAC1B,GAAIxhB,EAAE+hB,SAAWR,EAAK/E,OAASoF,EAE3B,OAIJ,EAAK7f,OAAO8L,UACZ,EAAKjL,UAAU,QAAS5C,EAAG,EAAKgiB,YAAYhiB,OAIpD5C,KAAKsT,QAAQhG,iBAAiB,YAAY,SAAA1K,GAClC,EAAK+B,OAAO8L,UACZ,EAAKjL,UAAU,WAAY5C,EAAG,EAAKgiB,YAAYhiB,OAIvD5C,KAAKsT,QAAQhG,iBAAiB,UAAU,SAAA1K,GAAC,OACrC,EAAK4C,UAAU,SAAU5C,Q,gCAevByD,EAAOxD,EAAQgI,EAAOC,GACvB9K,KAAK4Z,SAAS/W,IACf7C,KAAKogB,YAGTpgB,KAAK2E,OAAO2c,SACNthB,KAAK6kB,SAASxe,EAAO,EAAGwE,EAAOC,GAC/B9K,KAAK8kB,SAASze,EAAO,EAAGwE,EAAOC,K,oCAOhB,OAAjB9K,KAAKsT,UACLtT,KAAKsT,QAAQgR,WAAa,K,+BASzBS,GACL,IAAMlQ,EAAW7U,KAAKsT,QAAQiR,YAAcQ,EAC5C/kB,KAAKglB,mBAAmBnQ,GAAU,K,yCAUnBA,EAAUoG,GACzB,IAAMqJ,EAAatkB,KAAKsT,QAAQgR,WAC1BW,KAAUjlB,KAAKsT,QAAQC,YAAc,GACrC2R,EAAYllB,KAAKsT,QAAQiR,YAAcvkB,KAAKsT,QAAQC,YACtDsD,EAAShC,EAAWoQ,EACpBlQ,EAAS8B,EAASyN,EAEtB,GAAiB,GAAbY,EAAJ,CAMA,IAAKjK,IAAcgK,GAAQlQ,GAAUA,EAASkQ,EAAM,CAEhD,IAAI7P,EAAOpV,KAAK2E,OAAO6K,eAGvB4F,GAAQ6P,EACR7P,GAAQ8P,EAGRrO,EAASyN,GADTvP,EAASrR,KAAKsH,KAAKoK,EAAM1R,KAAKqH,IAAIqK,EAAML,MAK5C8B,EAASnT,KAAKsH,IAAI,EAAGtH,KAAKqH,IAAIma,EAAWrO,MAE3ByN,IACVtkB,KAAKsT,QAAQgR,WAAazN,M,mCAU9B,IAAIuL,EAAI,EACR,GAAIpiB,KAAKsT,QAAS,CACd,IAAMtC,EAAahR,KAAK2E,OAAOqM,WAQ/B,GAPAoR,EAAI1e,KAAKoS,MAAM9V,KAAKsT,QAAQgR,WAAatT,GAOrChR,KAAK2E,OAAOiN,aAAc,CAC1B,IAAMsT,KACFllB,KAAKsT,QAAQiR,YAAcvT,EAC3BhR,KAAKgW,YAEToM,EAAI1e,KAAKqH,IAAIma,EAAWxhB,KAAKsH,IAAI,EAAGoX,KAG5C,OAAOA,I,iCASP,OAAO1e,KAAKoS,MAAM9V,KAAK0N,UAAU6F,YAAcvT,KAAK2E,OAAOqM,c,+BAStD/C,GACL,OAAIjO,KAAKiO,OAASA,IAIlBjO,KAAKiO,MAAQA,EAETjO,KAAK2E,OAAO0L,YAAcrQ,KAAK2E,OAAOiN,aACtC5R,KAAKkE,MAAMlE,KAAKsT,QAAS,CACrBrF,MAAO,KAGXjO,KAAKkE,MAAMlE,KAAKsT,QAAS,CACrBrF,SAAUjO,KAAKiO,MAAQjO,KAAK2E,OAAOqM,YAAc,OAIzDhR,KAAKmlB,cACE,K,gCASD5U,GACN,OAAIA,GAAUvQ,KAAKuQ,SAGnBvQ,KAAKuQ,OAASA,EAEdvQ,KAAKkE,MAAMlE,KAAKsT,QAAS,CACrB/C,UAAWvQ,KAAKuQ,OAASvQ,KAAK2E,OAAOqM,YAAc,OAGvDhR,KAAKmlB,cACE,K,+BAQF3Q,GACL,IAAM4Q,EAAa,EAAIplB,KAAK2E,OAAOqM,WAC7BqU,EAAM3hB,KAAKoS,MAAMtB,EAAWxU,KAAKiO,OAASmX,EAEhD,GAAIC,EAAMrlB,KAAKyjB,SAAW4B,EAAMrlB,KAAKyjB,SAAW2B,EAAY,CAGxD,GAFAplB,KAAKyjB,QAAU4B,EAEXrlB,KAAK2E,OAAOiN,cAAgB5R,KAAK2E,OAAO4K,WAAY,CACpD,IAAM+V,KAAYtlB,KAAKsT,QAAQiR,YAAc/P,GAC7CxU,KAAKglB,mBACDM,EACAtlB,KAAK2E,OAAO8K,uBAIpBzP,KAAKulB,eAAeF,M,gCAQxBrlB,KAAKsL,QACDtL,KAAKsT,UACDtT,KAAKsT,QAAQlE,YAAcpP,KAAK0N,WAChC1N,KAAK0N,UAAUW,YAAYrO,KAAKsT,SAEpCtT,KAAKsT,QAAU,Q,6GAiCdjN,EAAOya,EAAcjW,EAAOC,M,+BAe5BzE,EAAOya,EAAcjW,EAAOC,M,0EAetB+J,S,8BA9YiB3I,EAAK9J,U,gICHzC,cACA,U,6NASqBuc,E,WACjB,c,4FAAc,SAMV3e,KAAK0gB,KAAO,KAMZ1gB,KAAKwlB,QAAU,KAMfxlB,KAAKwU,SAAW,KAMhBxU,KAAKylB,YAAc,KAMnBzlB,KAAK6K,MAAQ,EAMb7K,KAAK8K,IAAM,EAMX9K,KAAKoN,IAAK,kBAC2B,IAA1BpN,KAAK0lB,YAAY/kB,KAClBX,KAAK0lB,YAAY/kB,KAAK6L,cAAgB,IACtC,gBAOVxM,KAAK4e,wBAA0B,G,wDAQ1Bna,GACLzE,KAAK0gB,KAAOjc,EACZzE,KAAKwlB,QAAUxlB,KAAK0gB,KAAKiF,WAAW,KAAM3lB,KAAK4e,2B,mCAStCna,GACTzE,KAAKwU,SAAW/P,EAChBzE,KAAKylB,YAAczlB,KAAKwU,SAASmR,WAC7B,KACA3lB,KAAK4e,2B,uCAYIiC,EAAchB,EAAY5R,EAAOsC,GAG9CvQ,KAAK6K,MAAQ7K,KAAK0gB,KAAKkF,WAAa/F,GAAc,EAClD7f,KAAK8K,IAAM9K,KAAK6K,MAAQgW,EAAehB,EAGvC7f,KAAK0gB,KAAKzS,MAAQA,EAClBjO,KAAK0gB,KAAKnQ,OAASA,EACnB,IAAIsV,EAAc,CAAE5X,MAAO4S,EAAe,OAC1C,aAAM7gB,KAAK0gB,KAAMmF,GAEb7lB,KAAKse,oBAELte,KAAKwU,SAASvG,MAAQA,EACtBjO,KAAKwU,SAASjE,OAASA,GACvB,aAAMvQ,KAAKwU,SAAUqR,M,kCASzB7lB,KAAKwlB,QAAQM,UACT,EACA,EACA9lB,KAAKwlB,QAAQO,OAAO9X,MACpBjO,KAAKwlB,QAAQO,OAAOxV,QAIpBvQ,KAAKse,mBACLte,KAAKylB,YAAYK,UACb,EACA,EACA9lB,KAAKylB,YAAYM,OAAO9X,MACxBjO,KAAKylB,YAAYM,OAAOxV,U,oCAWtB2B,EAAWZ,GACrBtR,KAAKwlB,QAAQQ,UAAY9T,EAErBlS,KAAKse,oBACLte,KAAKylB,YAAYO,UAAY1U,K,gCAa3B8Q,EAAGC,EAAGpU,EAAOsC,EAAQ+R,GAC3BtiB,KAAKimB,kBAAkBjmB,KAAKwlB,QAASpD,EAAGC,EAAGpU,EAAOsC,EAAQ+R,GAEtDtiB,KAAKse,mBACLte,KAAKimB,kBACDjmB,KAAKylB,YACLrD,EACAC,EACApU,EACAsC,EACA+R,K,wCAeM4D,EAAK9D,EAAGC,EAAGpU,EAAOsC,EAAQ+R,GACnC4D,IAID5D,EACAtiB,KAAKmmB,gBAAgBD,EAAK9D,EAAGC,EAAGpU,EAAOsC,EAAQ+R,GAE/C4D,EAAIpE,SAASM,EAAGC,EAAGpU,EAAOsC,M,sCAiBlB2V,EAAK9D,EAAGC,EAAGpU,EAAOsC,EAAQ+R,GACvB,IAAX/R,IAKAA,EAAS,IAET8R,GADA9R,IAAW,GAGf2V,EAAIE,YACJF,EAAIG,OAAOjE,EAAIE,EAAQD,GACvB6D,EAAII,OAAOlE,EAAInU,EAAQqU,EAAQD,GAC/B6D,EAAIK,iBAAiBnE,EAAInU,EAAOoU,EAAGD,EAAInU,EAAOoU,EAAIC,GAClD4D,EAAII,OAAOlE,EAAInU,EAAOoU,EAAI9R,EAAS+R,GACnC4D,EAAIK,iBACAnE,EAAInU,EACJoU,EAAI9R,EACJ6R,EAAInU,EAAQqU,EACZD,EAAI9R,GAER2V,EAAII,OAAOlE,EAAIE,EAAQD,EAAI9R,GAC3B2V,EAAIK,iBAAiBnE,EAAGC,EAAI9R,EAAQ6R,EAAGC,EAAI9R,EAAS+R,GACpD4D,EAAII,OAAOlE,EAAGC,EAAIC,GAClB4D,EAAIK,iBAAiBnE,EAAGC,EAAGD,EAAIE,EAAQD,GACvC6D,EAAIM,YACJN,EAAIO,U,gCAeEpgB,EAAO2a,EAAQG,EAAOD,EAASrW,EAAOC,GAC5C9K,KAAK0mB,kBACD1mB,KAAKwlB,QACLnf,EACA2a,EACAG,EACAD,EACArW,EACAC,GAGA9K,KAAKse,mBACLte,KAAK0mB,kBACD1mB,KAAKylB,YACLpf,EACA2a,EACAG,EACAD,EACArW,EACAC,K,wCAkBMob,EAAK7f,EAAO2a,EAAQG,EAAOD,EAASrW,EAAOC,GACzD,GAAKob,EAAL,CAIA,IAuBI9lB,EAAGshB,EAAME,EAvBP/e,EAASwD,EAAMxD,OAAS,EACxBuH,EAAQ1G,KAAKoS,MAAMjT,EAAS7C,KAAK6K,OAMjC8b,EAAcvc,EACdwc,EAHOljB,KAAKoS,MAAMjT,EAAS7C,KAAK8K,KAAO,EAIvC0W,EAAQxhB,KAAK0gB,KAAKzS,OAAS2Y,EAAYD,EAAc,GAGrDE,EAAa1F,EAAQD,EACrB4F,EAAa9F,EAASG,EAW5B,IATA+E,EAAIE,YACJF,EAAIG,QAAQM,EAAcvc,GAASoX,EAAOqF,GAE1CX,EAAII,QACCK,EAAcvc,GAASoX,EACxBqF,EAAanjB,KAAKoS,OAAOzP,EAAM,EAAIsgB,IAAgB,GAAKG,IAIvD1mB,EAAIumB,EAAavmB,EAAIwmB,EAAWxmB,IACjCshB,EAAOrb,EAAM,EAAIjG,IAAM,EACvBwhB,EAAIle,KAAKoS,MAAM4L,EAAOoF,GACtBZ,EAAII,QAAQlmB,EAAIgK,GAASoX,EAAQxhB,KAAKue,UAAWsI,EAAajF,GAMlE,IADA,IAAI3W,EAAI2b,EAAY,EACZ3b,GAAK0b,EAAa1b,IACtByW,EAAOrb,EAAM,EAAI4E,EAAI,IAAM,EAC3B2W,EAAIle,KAAKoS,MAAM4L,EAAOoF,GACtBZ,EAAII,QAAQrb,EAAIb,GAASoX,EAAQxhB,KAAKue,UAAWsI,EAAajF,GAGlEsE,EAAII,QACCK,EAAcvc,GAASoX,EACxBqF,EACInjB,KAAKoS,OAAOzP,EAAM,EAAIsgB,EAAc,IAAM,GAAKG,IAGvDZ,EAAIM,YACJN,EAAIO,U,gCAOJzmB,KAAKwlB,QAAU,KACfxlB,KAAK0gB,KAAO,KAEZ1gB,KAAKylB,YAAc,KACnBzlB,KAAKwU,SAAW,O,+BAgBX4E,EAAQC,EAASC,GAAM,WAC5B,MAAa,SAATA,EACO,IAAInQ,SAAQ,SAAA2P,GACf,EAAK4H,KAAKqG,OAAOjO,EAASM,EAAQC,MAEtB,YAATC,EACAtZ,KAAK0gB,KAAKsG,UAAU5N,EAAQC,QADhC,O,0UCtXM1E,E,WAIjB,c,4FAAc,SACV3U,KAAKinB,iB,gEAaLjnB,KAAKknB,gBAAkB,GAMvBlnB,KAAKmnB,iBAAmB,I,0CAWRtkB,EAAQgI,EAAOC,GAC3BjI,GAAU7C,KAAKmnB,kBACfnnB,KAAKinB,iBACLjnB,KAAKmnB,gBAAkBtkB,GAO3B,IAHA,IAAIukB,EAAiB,GACjBhnB,EAAI,EAGJA,EAAIJ,KAAKknB,gBAAgBrkB,QACzB7C,KAAKknB,gBAAgB9mB,GAAKyK,GAE1BzK,IASJ,IAHIA,EAAI,GAAK,GACTgnB,EAAe3kB,KAAKoI,GAGpBzK,EAAIJ,KAAKknB,gBAAgBrkB,QACzB7C,KAAKknB,gBAAgB9mB,IAAM0K,GAE3Bsc,EAAe3kB,KAAKzC,KAAKknB,gBAAgB9mB,IACzCA,IAGAA,EAAI,GAAK,GACTgnB,EAAe3kB,KAAKqI,GAIxBsc,EAAiBA,EAAexf,QAAO,SAACyf,EAAMhC,EAAK1M,GAC/C,OAAW,GAAP0M,EACOgC,GAAQ1O,EAAI0M,EAAM,GAClBA,GAAO1M,EAAI9V,OAAS,EACpBwkB,GAAQ1O,EAAI0M,EAAM,GAEtBgC,GAAQ1O,EAAI0M,EAAM,IAAMgC,GAAQ1O,EAAI0M,EAAM,MAMrDrlB,KAAKknB,gBAAkBlnB,KAAKknB,gBAAgBI,OAAOF,GACnDpnB,KAAKknB,gBAAkBlnB,KAAKknB,gBACvBK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACnB7f,QAAO,SAACyf,EAAMhC,EAAK1M,GAChB,OAAW,GAAP0M,EACOgC,GAAQ1O,EAAI0M,EAAM,GAClBA,GAAO1M,EAAI9V,OAAS,EACpBwkB,GAAQ1O,EAAI0M,EAAM,GAEtBgC,GAAQ1O,EAAI0M,EAAM,IAAMgC,GAAQ1O,EAAI0M,EAAM,MAKzD,IAAMqC,EAAqB,GAC3B,IAAKtnB,EAAI,EAAGA,EAAIgnB,EAAevkB,OAAQzC,GAAK,EACxCsnB,EAAmBjlB,KAAK,CAAC2kB,EAAehnB,GAAIgnB,EAAehnB,EAAI,KAGnE,OAAOsnB,I,uCASP,IACItnB,EADEunB,EAAsB,GAE5B,IAAKvnB,EAAI,EAAGA,EAAIJ,KAAKknB,gBAAgBrkB,OAAQzC,GAAK,EAC9CunB,EAAoBllB,KAAK,CACrBzC,KAAKknB,gBAAgB9mB,GACrBJ,KAAKknB,gBAAgB9mB,EAAI,KAGjC,OAAOunB,O,8FC5Hf,I,wjDAWqBtV,E,sQAMjB,WAAY1N,GAAQ,a,4FAAA,UAChB,cAAMA,IAEDA,OAASA,EAEd,EAAKijB,mBAAqB,KALV,E,4CAYhB5nB,KAAKyH,gBAAgBzH,KAAK2E,OAAO+C,WACjC1H,KAAK6M,cACL7M,KAAKqH,mBACLrH,KAAKsH,mBACLtH,KAAKuH,uB,4BAWH6E,EAAO/F,EAAOsH,GAChB,yCAAYvB,EAAO/F,EAAOsH,GAC1B3N,KAAK6nB,yBAAyBzb,K,+CAST0b,GACrB9nB,KAAK4nB,mBAAqB5nB,KAAKyF,GAAGoiB,yBAC9BC,GAEJ9nB,KAAK4nB,mBAAmB9f,QAAQ9H,KAAKuG,Y,2BAGpCsE,EAAOC,GAER,OADA9K,KAAKgM,qBACL,wCAAkBnB,EAAOC,K,gCASnBzJ,GACNrB,KAAKkG,SAASyD,KAAKC,eAAevI,EAAOrB,KAAKyF,GAAGI,e,gCASjD,4CAEA7F,KAAKuL,uB,kCArFb,O,4BAWkDY,S","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","export { default as ajax } from './ajax';\nexport { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as extend } from './extend';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {};\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            var dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        this.offlineAc.decodeAudioData(\n            arraybuffer,\n            data => callback(data),\n            errback\n        );\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n        media.crossOrigin = 'anonymous';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            // console.log('MEDIA LOAD', media);\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} reflection=true toggle mirrored waveform\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     headers: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        reflection: true,\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n        },\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            util.style(this.container, { transform: 'rotateY(180deg)' });\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n        }\n\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        return new Promise((resolve, reject) => {\n            const json = JSON.stringify(arr);\n\n            if (!noWindow) {\n                window.open(\n                    'data:application/json;charset=utf-8,' +\n                        encodeURIComponent(json)\n                );\n            }\n            resolve(json);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import Observer from './observer';\n\n/**\n * Perform an ajax request using `XMLHttpRequest`.\n *\n * @deprecated Use `util.fetchFile` instead.\n *\n * @param {Object} options AJAX options to use. See example below for options.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     method: 'GET',\n *     url: undefined,\n *     responseType: 'json',\n *     xhr: {}\n * };\n *\n * // override default options\n * options.url = '../media/demo.wav';\n * options.responseType = 'arraybuffer';\n * options.xhr = {\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ],\n *     withCredentials: true\n * };\n *\n * // make ajax call\n * let ajaxCall = util.ajax(options);\n * ajaxCall.on('progress', e => {\n *     console.log('progress', e);\n * });\n * ajaxCall.on('success', (data, e) => {\n *     console.log('success!', data);\n * });\n * ajaxCall.on('error', e => {\n *     console.warn('ajax error: ' + e.target.statusText);\n * });\n */\nexport default function ajax(options) {\n    const instance = new Observer();\n    const xhr = new XMLHttpRequest();\n    let fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n\n    if (options.xhr) {\n        if (options.xhr.requestHeaders) {\n            // add custom request headers\n            options.xhr.requestHeaders.forEach(header => {\n                xhr.setRequestHeader(header.key, header.value);\n            });\n        }\n        if (options.xhr.withCredentials) {\n            // use credentials\n            xhr.withCredentials = true;\n        }\n    }\n\n    xhr.addEventListener('progress', e => {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', e => {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n * @deprecated since version 3.3.0\n */\nexport default function extend(dest, ...sources) {\n    console.warn('util.extend is deprecated; use Object.assign instead');\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (\n                !response.body ||\n                document.documentMode ||\n                /Edge/.test(navigator.userAgent)\n            ) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n\n        this.style(this.progressWave, { width: totalWidth + \"px\" });\n        this.style(this.progressWave, { \"clip-path\": this.makeInset(totalWidth)});\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        entry.initWave(\n            this.wrapper.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%',\n                    pointerEvents: 'none'\n                })\n            )\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            entry.initProgress(\n                this.progressWave.appendChild(\n                    this.style(document.createElement('canvas'), {\n                        position: 'absolute',\n                        left: leftOffset + 'px',\n                        top: 0,\n                        bottom: 0,\n                        height: '100%'\n                    })\n                )\n            );\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n                let halfHmod = this.params.reflection ? 1 : 2;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    let h;\n\n                    if (this.params.reflection){\n                        h = Math.round((peak / absmax) * halfH);\n\n                    } else {\n                        h = Math.abs(Math.round((peak / absmax) * halfH));\n                    }\n\n                    /* in case of silences, allow the user to specify that we\n                     * always draw *something* (normally a 1px high bar) */\n                    if (h == 0 && this.params.barMinHeight)\n                        h = this.params.barMinHeight;\n\n\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH * halfHmod - h * halfHmod + offsetY,\n                        bar + this.halfPixel,\n                        h * 2 * halfHmod,\n                        this.barRadius\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRect(x, y, width, height, radius) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels =  channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks))\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * drawIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex,\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * build a css inset string for masking off portions of the progessWave\n     *\n     * In order to avoid browser layout passes, we leave our progress wave at full width\n     * but mask a portion of it off using the `clip-path` CSS property.\n     *\n     * @param {number} rightInset=number of pixels to clip off the right\n     * @return {string} css\n     */\n    makeInset(rightInset) {\n        return `inset(0px ${rightInset}px 0px 0px)`;\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        let actualWidth = this.width / this.params.pixelRatio;\n\n        this.style(this.progressWave, { 'clip-path': this.makeInset(actualWidth - position)});\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\n                    (this.params.pixelRatio / nominalWidth) || 0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress =\n                ((this.params.rtl\n                    ? bbox.right - clientX\n                    : clientX - bbox.left) +\n                    this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return progress;\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * Set the audio volume\n     * overwrite inherited method from mediaelement.js\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n"],"sourceRoot":""}